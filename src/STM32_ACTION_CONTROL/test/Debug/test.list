
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d10  08002d10  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08002d10  08002d10  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d10  08002d10  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08002d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200000a8  08002dc0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002dc0  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000575b  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001342  00000000  00000000  0002582c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00026b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  000271c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d24  00000000  00000000  000277a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d77  00000000  00000000  0003e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008252f  00000000  00000000  00045243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7772  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  000c77c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b44 	.word	0x08002b44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08002b44 	.word	0x08002b44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <calculate_xor_checksum>:
void stopp(){

}

uint8_t calculate_xor_checksum(uint8_t *data, uint32_t length) //checksum algorithm function using XOR. Takes in the pointer to the first element of the array and size of the array
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0; //initialise the checksum to be zero
 8000166:	2300      	movs	r3, #0
 8000168:	73fb      	strb	r3, [r7, #15]

    for (uint32_t i = 0; i < length; i++)
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
 800016e:	e009      	b.n	8000184 <calculate_xor_checksum+0x28>
    {
        checksum ^= data[i]; //runs through each element and does the XOR operation. Updates the value of checksum accordingly.
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4413      	add	r3, r2
 8000176:	781a      	ldrb	r2, [r3, #0]
 8000178:	7bfb      	ldrb	r3, [r7, #15]
 800017a:	4053      	eors	r3, r2
 800017c:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < length; i++)
 800017e:	68bb      	ldr	r3, [r7, #8]
 8000180:	3301      	adds	r3, #1
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	68ba      	ldr	r2, [r7, #8]
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	429a      	cmp	r2, r3
 800018a:	d3f1      	bcc.n	8000170 <calculate_xor_checksum+0x14>
    }

    return checksum; //returns the value of the checksum
 800018c:	7bfb      	ldrb	r3, [r7, #15]
}
 800018e:	4618      	mov	r0, r3
 8000190:	3714      	adds	r7, #20
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <move>:
void move(uint8_t* movement, int count) //function that will coordinate the movement. Takes in the specific direction array and the unit counts for the movement.
{
 8000198:	b590      	push	{r4, r7, lr}
 800019a:	b087      	sub	sp, #28
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]

	  movement[3] = calculate_xor_checksum(movement, sizeof(*movement)* 4); //updates the value of the 4th element with the checksum value by calling the checksum function.
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	1cdc      	adds	r4, r3, #3
 80001a6:	2104      	movs	r1, #4
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f7ff ffd7 	bl	800015c <calculate_xor_checksum>
 80001ae:	4603      	mov	r3, r0
 80001b0:	7023      	strb	r3, [r4, #0]

  uint8_t flag = 0x00; //declare an uint8_t type variable flag and initialise it to 0x00
 80001b2:	2300      	movs	r3, #0
 80001b4:	72bb      	strb	r3, [r7, #10]

  uint8_t ok = 0x01; //declare an uint8_t type variable ok and initialise it to 0x01
 80001b6:	2301      	movs	r3, #1
 80001b8:	72fb      	strb	r3, [r7, #11]

  for (int k = 0; k < count;) //loops through till it reaches count as desired by the function call parameter
 80001ba:	2300      	movs	r3, #0
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	e035      	b.n	800022c <move+0x94>
  {
    HAL_UART_Receive(&huart1,&flag,sizeof(flag),10); //checks the state of the flag
 80001c0:	f107 010a 	add.w	r1, r7, #10
 80001c4:	230a      	movs	r3, #10
 80001c6:	2201      	movs	r2, #1
 80001c8:	481d      	ldr	r0, [pc, #116]	; (8000240 <move+0xa8>)
 80001ca:	f001 fe94 	bl	8001ef6 <HAL_UART_Receive>

    if(flag == ok) //if flag is equals to ok, signifies that there is no blockage
 80001ce:	7abb      	ldrb	r3, [r7, #10]
 80001d0:	7afa      	ldrb	r2, [r7, #11]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d118      	bne.n	8000208 <move+0x70>
    {
      for (int i = 0; i <= 3; i++)
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	e00b      	b.n	80001f4 <move+0x5c>
      {
        HAL_UART_Transmit(&huart1, &movement[i], 1, HAL_MAX_DELAY); //transmits the movement data one element at a time
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	18d1      	adds	r1, r2, r3
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	2201      	movs	r2, #1
 80001e8:	4815      	ldr	r0, [pc, #84]	; (8000240 <move+0xa8>)
 80001ea:	f001 fdf2 	bl	8001dd2 <HAL_UART_Transmit>
      for (int i = 0; i <= 3; i++)
 80001ee:	693b      	ldr	r3, [r7, #16]
 80001f0:	3301      	adds	r3, #1
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	2b03      	cmp	r3, #3
 80001f8:	ddf0      	ble.n	80001dc <move+0x44>
      }

      k++; //increase the value of k
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	3301      	adds	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
      HAL_Delay(10);
 8000200:	200a      	movs	r0, #10
 8000202:	f000 fe8f 	bl	8000f24 <HAL_Delay>
 8000206:	e011      	b.n	800022c <move+0x94>
    }

    else ////if flag is not equals to ok, signifies that there is a blockage
    {
      for (int i = 0; i <= 3; i++)
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e00b      	b.n	8000226 <move+0x8e>
      {
        HAL_UART_Transmit(&huart1, &stop[i], 1, HAL_MAX_DELAY); //transmits the stop movement
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <move+0xac>)
 8000212:	1899      	adds	r1, r3, r2
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	2201      	movs	r2, #1
 800021a:	4809      	ldr	r0, [pc, #36]	; (8000240 <move+0xa8>)
 800021c:	f001 fdd9 	bl	8001dd2 <HAL_UART_Transmit>
      for (int i = 0; i <= 3; i++)
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	3301      	adds	r3, #1
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	2b03      	cmp	r3, #3
 800022a:	ddf0      	ble.n	800020e <move+0x76>
  for (int k = 0; k < count;) //loops through till it reaches count as desired by the function call parameter
 800022c:	697a      	ldr	r2, [r7, #20]
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	dbc5      	blt.n	80001c0 <move+0x28>
       // HAL_Delay(10);
      }
    }
  }
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	371c      	adds	r7, #28
 800023a:	46bd      	mov	sp, r7
 800023c:	bd90      	pop	{r4, r7, pc}
 800023e:	bf00      	nop
 8000240:	200000c4 	.word	0x200000c4
 8000244:	20000008 	.word	0x20000008

08000248 <getBlocks>:

    }
}

void getBlocks(uint8_t sigmap,uint8_t maxBlocks)
  {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	460a      	mov	r2, r1
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	4613      	mov	r3, r2
 8000256:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit(&huart3, blocks_send, sizeof(blocks_send), 50);
 8000258:	2332      	movs	r3, #50	; 0x32
 800025a:	2206      	movs	r2, #6
 800025c:	4927      	ldr	r1, [pc, #156]	; (80002fc <getBlocks+0xb4>)
 800025e:	4828      	ldr	r0, [pc, #160]	; (8000300 <getBlocks+0xb8>)
 8000260:	f001 fdb7 	bl	8001dd2 <HAL_UART_Transmit>
	    HAL_UART_Receive(&huart3, blocks_receive, sizeof(blocks_receive), 50);
 8000264:	2332      	movs	r3, #50	; 0x32
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	4926      	ldr	r1, [pc, #152]	; (8000304 <getBlocks+0xbc>)
 800026a:	4825      	ldr	r0, [pc, #148]	; (8000300 <getBlocks+0xb8>)
 800026c:	f001 fe43 	bl	8001ef6 <HAL_UART_Receive>

	    object_present = blocks_receive[3];
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <getBlocks+0xbc>)
 8000272:	78db      	ldrb	r3, [r3, #3]
 8000274:	b29a      	uxth	r2, r3
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <getBlocks+0xc0>)
 8000278:	801a      	strh	r2, [r3, #0]
	    signature = ((uint16_t)blocks_receive[7] << 8) | blocks_receive[6];
 800027a:	4b22      	ldr	r3, [pc, #136]	; (8000304 <getBlocks+0xbc>)
 800027c:	79db      	ldrb	r3, [r3, #7]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b21a      	sxth	r2, r3
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <getBlocks+0xbc>)
 8000284:	799b      	ldrb	r3, [r3, #6]
 8000286:	b21b      	sxth	r3, r3
 8000288:	4313      	orrs	r3, r2
 800028a:	b21b      	sxth	r3, r3
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <getBlocks+0xc4>)
 8000290:	801a      	strh	r2, [r3, #0]
		x_combined = ((uint16_t)blocks_receive[9] << 8) | blocks_receive[8];
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <getBlocks+0xbc>)
 8000294:	7a5b      	ldrb	r3, [r3, #9]
 8000296:	021b      	lsls	r3, r3, #8
 8000298:	b21a      	sxth	r2, r3
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <getBlocks+0xbc>)
 800029c:	7a1b      	ldrb	r3, [r3, #8]
 800029e:	b21b      	sxth	r3, r3
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <getBlocks+0xc8>)
 80002a8:	801a      	strh	r2, [r3, #0]
		y_combined = ((uint16_t)blocks_receive[11] << 8) | blocks_receive[10];
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <getBlocks+0xbc>)
 80002ac:	7adb      	ldrb	r3, [r3, #11]
 80002ae:	021b      	lsls	r3, r3, #8
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <getBlocks+0xbc>)
 80002b4:	7a9b      	ldrb	r3, [r3, #10]
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	b29a      	uxth	r2, r3
 80002be:	4b15      	ldr	r3, [pc, #84]	; (8000314 <getBlocks+0xcc>)
 80002c0:	801a      	strh	r2, [r3, #0]
		width_combined = ((uint16_t)blocks_receive[13] << 8) | blocks_receive[12];
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <getBlocks+0xbc>)
 80002c4:	7b5b      	ldrb	r3, [r3, #13]
 80002c6:	021b      	lsls	r3, r3, #8
 80002c8:	b21a      	sxth	r2, r3
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <getBlocks+0xbc>)
 80002cc:	7b1b      	ldrb	r3, [r3, #12]
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <getBlocks+0xd0>)
 80002d8:	801a      	strh	r2, [r3, #0]
		height_combined = ((uint16_t)blocks_receive[15] << 8) | blocks_receive[14];
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <getBlocks+0xbc>)
 80002dc:	7bdb      	ldrb	r3, [r3, #15]
 80002de:	021b      	lsls	r3, r3, #8
 80002e0:	b21a      	sxth	r2, r3
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <getBlocks+0xbc>)
 80002e4:	7b9b      	ldrb	r3, [r3, #14]
 80002e6:	b21b      	sxth	r3, r3
 80002e8:	4313      	orrs	r3, r2
 80002ea:	b21b      	sxth	r3, r3
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <getBlocks+0xd4>)
 80002f0:	801a      	strh	r2, [r3, #0]



  }
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000
 8000300:	2000014c 	.word	0x2000014c
 8000304:	20000190 	.word	0x20000190
 8000308:	200001b8 	.word	0x200001b8
 800030c:	200001c2 	.word	0x200001c2
 8000310:	200001ba 	.word	0x200001ba
 8000314:	200001bc 	.word	0x200001bc
 8000318:	200001be 	.word	0x200001be
 800031c:	200001c0 	.word	0x200001c0

08000320 <main>:

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08e      	sub	sp, #56	; 0x38
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000326:	f000 fd9b 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032a:	f000 fab7 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032e:	f000 fb75 	bl	8000a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000332:	f000 fb1f 	bl	8000974 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000336:	f000 faf3 	bl	8000920 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800033a:	f000 fb45 	bl	80009c8 <MX_USART3_UART_Init>
	  //      sprintf(blocks_msg, "Forward");
	  //      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), HAL_MAX_DELAY);



	  	 getBlocks(1, 1);
 800033e:	2101      	movs	r1, #1
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ff81 	bl	8000248 <getBlocks>

		 if (object_present == 0) //no object
 8000346:	4ba2      	ldr	r3, [pc, #648]	; (80005d0 <main+0x2b0>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d120      	bne.n	8000390 <main+0x70>
		 {
			 while (object_present == 0)
 800034e:	e01b      	b.n	8000388 <main+0x68>
			 {
			      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000356:	489f      	ldr	r0, [pc, #636]	; (80005d4 <main+0x2b4>)
 8000358:	f001 f89a 	bl	8001490 <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000362:	489d      	ldr	r0, [pc, #628]	; (80005d8 <main+0x2b8>)
 8000364:	f001 f894 	bl	8001490 <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036e:	489a      	ldr	r0, [pc, #616]	; (80005d8 <main+0x2b8>)
 8000370:	f001 f88e 	bl	8001490 <HAL_GPIO_WritePin>
//			      HAL_Delay(50);
			      getBlocks(1, 1);
 8000374:	2101      	movs	r1, #1
 8000376:	2001      	movs	r0, #1
 8000378:	f7ff ff66 	bl	8000248 <getBlocks>


			      move(stop, count);
 800037c:	4b97      	ldr	r3, [pc, #604]	; (80005dc <main+0x2bc>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	4897      	ldr	r0, [pc, #604]	; (80005e0 <main+0x2c0>)
 8000384:	f7ff ff08 	bl	8000198 <move>
			 while (object_present == 0)
 8000388:	4b91      	ldr	r3, [pc, #580]	; (80005d0 <main+0x2b0>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0df      	beq.n	8000350 <main+0x30>
			 }


		 }

	  	 switch (signature)
 8000390:	4b94      	ldr	r3, [pc, #592]	; (80005e4 <main+0x2c4>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d003      	beq.n	80003a0 <main+0x80>
 8000398:	2b02      	cmp	r3, #2
 800039a:	f000 823a 	beq.w	8000812 <main+0x4f2>
 800039e:	e255      	b.n	800084c <main+0x52c>
	  	 {
	  		 case 1:

	  			    // if the LED is on, turn it off

	  			      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a6:	488b      	ldr	r0, [pc, #556]	; (80005d4 <main+0x2b4>)
 80003a8:	f001 f872 	bl	8001490 <HAL_GPIO_WritePin>
	  			      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b2:	4889      	ldr	r0, [pc, #548]	; (80005d8 <main+0x2b8>)
 80003b4:	f001 f86c 	bl	8001490 <HAL_GPIO_WritePin>
	  			      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003be:	4886      	ldr	r0, [pc, #536]	; (80005d8 <main+0x2b8>)
 80003c0:	f001 f866 	bl	8001490 <HAL_GPIO_WritePin>
	  			      HAL_Delay(50);
 80003c4:	2032      	movs	r0, #50	; 0x32
 80003c6:	f000 fdad 	bl	8000f24 <HAL_Delay>



	  			 if (object_present == 0) //no object
 80003ca:	4b81      	ldr	r3, [pc, #516]	; (80005d0 <main+0x2b0>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d116      	bne.n	8000400 <main+0xe0>
	  			 {
	  				 move(stop, count);
 80003d2:	4b82      	ldr	r3, [pc, #520]	; (80005dc <main+0x2bc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4619      	mov	r1, r3
 80003d8:	4881      	ldr	r0, [pc, #516]	; (80005e0 <main+0x2c0>)
 80003da:	f7ff fedd 	bl	8000198 <move>

	  			      char blocks_msg[50];
	  			      sprintf(blocks_msg, " Stop ");
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4981      	ldr	r1, [pc, #516]	; (80005e8 <main+0x2c8>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 ff34 	bl	8002250 <siprintf>
	  			      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feae 	bl	800014c <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	1d39      	adds	r1, r7, #4
 80003f6:	230a      	movs	r3, #10
 80003f8:	487c      	ldr	r0, [pc, #496]	; (80005ec <main+0x2cc>)
 80003fa:	f001 fcea 	bl	8001dd2 <HAL_UART_Transmit>
	  				 } //end of if for desired range


	  			 }

	  			 break;
 80003fe:	e224      	b.n	800084a <main+0x52a>
	  					 if (width_combined > 120) //if the object is too near, move reverse
 8000400:	4b7b      	ldr	r3, [pc, #492]	; (80005f0 <main+0x2d0>)
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	2b78      	cmp	r3, #120	; 0x78
 8000406:	f240 80a9 	bls.w	800055c <main+0x23c>
	  						 if (x_combined < 100) //if the object is center but to the left, slide left
 800040a:	4b7a      	ldr	r3, [pc, #488]	; (80005f4 <main+0x2d4>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	2b63      	cmp	r3, #99	; 0x63
 8000410:	d830      	bhi.n	8000474 <main+0x154>
	  							 if (state == 1)
 8000412:	4b79      	ldr	r3, [pc, #484]	; (80005f8 <main+0x2d8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d108      	bne.n	800042c <main+0x10c>
	  								 move(stop, count);
 800041a:	4b70      	ldr	r3, [pc, #448]	; (80005dc <main+0x2bc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4619      	mov	r1, r3
 8000420:	486f      	ldr	r0, [pc, #444]	; (80005e0 <main+0x2c0>)
 8000422:	f7ff feb9 	bl	8000198 <move>
	  								 state = 0;
 8000426:	4b74      	ldr	r3, [pc, #464]	; (80005f8 <main+0x2d8>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
	  							 if (state2 == 0)
 800042c:	4b73      	ldr	r3, [pc, #460]	; (80005fc <main+0x2dc>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d108      	bne.n	8000446 <main+0x126>
	  								 move(stop, count);
 8000434:	4b69      	ldr	r3, [pc, #420]	; (80005dc <main+0x2bc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4869      	ldr	r0, [pc, #420]	; (80005e0 <main+0x2c0>)
 800043c:	f7ff feac 	bl	8000198 <move>
	  								 state2 = 1;
 8000440:	4b6e      	ldr	r3, [pc, #440]	; (80005fc <main+0x2dc>)
 8000442:	2201      	movs	r2, #1
 8000444:	601a      	str	r2, [r3, #0]
	  							move(bot_left,countb);
 8000446:	4b6e      	ldr	r3, [pc, #440]	; (8000600 <main+0x2e0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	486d      	ldr	r0, [pc, #436]	; (8000604 <main+0x2e4>)
 800044e:	f7ff fea3 	bl	8000198 <move>
	  						      sprintf(blocks_msg, " Bot-Left ");
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	496c      	ldr	r1, [pc, #432]	; (8000608 <main+0x2e8>)
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fefa 	bl	8002250 <siprintf>
	  						      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff fe74 	bl	800014c <strlen>
 8000464:	4603      	mov	r3, r0
 8000466:	b29a      	uxth	r2, r3
 8000468:	1d39      	adds	r1, r7, #4
 800046a:	230a      	movs	r3, #10
 800046c:	485f      	ldr	r0, [pc, #380]	; (80005ec <main+0x2cc>)
 800046e:	f001 fcb0 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 8000472:	e1ea      	b.n	800084a <main+0x52a>
	  						 else if (x_combined > 200) //if the object is center but to the right, slide right
 8000474:	4b5f      	ldr	r3, [pc, #380]	; (80005f4 <main+0x2d4>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	2bc8      	cmp	r3, #200	; 0xc8
 800047a:	d933      	bls.n	80004e4 <main+0x1c4>
	  							 if (state == 1)
 800047c:	4b5e      	ldr	r3, [pc, #376]	; (80005f8 <main+0x2d8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10b      	bne.n	800049c <main+0x17c>
	  								 state2 = 1;
 8000484:	4b5d      	ldr	r3, [pc, #372]	; (80005fc <main+0x2dc>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
	  								 move(stop, count);
 800048a:	4b54      	ldr	r3, [pc, #336]	; (80005dc <main+0x2bc>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4619      	mov	r1, r3
 8000490:	4853      	ldr	r0, [pc, #332]	; (80005e0 <main+0x2c0>)
 8000492:	f7ff fe81 	bl	8000198 <move>
	  								 state = 0;
 8000496:	4b58      	ldr	r3, [pc, #352]	; (80005f8 <main+0x2d8>)
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
	  							 if (state2 == 0)
 800049c:	4b57      	ldr	r3, [pc, #348]	; (80005fc <main+0x2dc>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d108      	bne.n	80004b6 <main+0x196>
	  								 move(stop, count);
 80004a4:	4b4d      	ldr	r3, [pc, #308]	; (80005dc <main+0x2bc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	484d      	ldr	r0, [pc, #308]	; (80005e0 <main+0x2c0>)
 80004ac:	f7ff fe74 	bl	8000198 <move>
	  								 state2 = 1;
 80004b0:	4b52      	ldr	r3, [pc, #328]	; (80005fc <main+0x2dc>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
	  							 move(bot_right, countb);
 80004b6:	4b52      	ldr	r3, [pc, #328]	; (8000600 <main+0x2e0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	4853      	ldr	r0, [pc, #332]	; (800060c <main+0x2ec>)
 80004be:	f7ff fe6b 	bl	8000198 <move>
	  						      sprintf(blocks_msg, " Bot-Right ");
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4952      	ldr	r1, [pc, #328]	; (8000610 <main+0x2f0>)
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fec2 	bl	8002250 <siprintf>
	  						      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fe3c 	bl	800014c <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	230a      	movs	r3, #10
 80004dc:	4843      	ldr	r0, [pc, #268]	; (80005ec <main+0x2cc>)
 80004de:	f001 fc78 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 80004e2:	e1b2      	b.n	800084a <main+0x52a>
	  						 else if (x_combined > 100 && x_combined < 200)
 80004e4:	4b43      	ldr	r3, [pc, #268]	; (80005f4 <main+0x2d4>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	2b64      	cmp	r3, #100	; 0x64
 80004ea:	f240 81ae 	bls.w	800084a <main+0x52a>
 80004ee:	4b41      	ldr	r3, [pc, #260]	; (80005f4 <main+0x2d4>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	2bc7      	cmp	r3, #199	; 0xc7
 80004f4:	f200 81a9 	bhi.w	800084a <main+0x52a>
	  							 state = 1;
 80004f8:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <main+0x2d8>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
	  							 state2 = 0;
 80004fe:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <main+0x2dc>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
	  							 if (width_combined < 140)
 8000504:	4b3a      	ldr	r3, [pc, #232]	; (80005f0 <main+0x2d0>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b8b      	cmp	r3, #139	; 0x8b
 800050a:	d809      	bhi.n	8000520 <main+0x200>
	  								 reverse[2] = 40;
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <main+0x2f4>)
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	709a      	strb	r2, [r3, #2]
	  								 move(reverse, count);
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <main+0x2bc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	483e      	ldr	r0, [pc, #248]	; (8000614 <main+0x2f4>)
 800051a:	f7ff fe3d 	bl	8000198 <move>
 800051e:	e00c      	b.n	800053a <main+0x21a>
	  							 else if (width_combined >= 140 )
 8000520:	4b33      	ldr	r3, [pc, #204]	; (80005f0 <main+0x2d0>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2b8b      	cmp	r3, #139	; 0x8b
 8000526:	d908      	bls.n	800053a <main+0x21a>
	  								 reverse[2] = 80;
 8000528:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <main+0x2f4>)
 800052a:	2250      	movs	r2, #80	; 0x50
 800052c:	709a      	strb	r2, [r3, #2]
	  								 move(reverse, count);
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <main+0x2bc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	4837      	ldr	r0, [pc, #220]	; (8000614 <main+0x2f4>)
 8000536:	f7ff fe2f 	bl	8000198 <move>
	  							  sprintf(blocks_msg, " Reverse ");
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4936      	ldr	r1, [pc, #216]	; (8000618 <main+0x2f8>)
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fe86 	bl	8002250 <siprintf>
	  							  HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fe00 	bl	800014c <strlen>
 800054c:	4603      	mov	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	1d39      	adds	r1, r7, #4
 8000552:	230a      	movs	r3, #10
 8000554:	4825      	ldr	r0, [pc, #148]	; (80005ec <main+0x2cc>)
 8000556:	f001 fc3c 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 800055a:	e176      	b.n	800084a <main+0x52a>
	  					 else if (width_combined < 70) //if the object is too far, move forward
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <main+0x2d0>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2b45      	cmp	r3, #69	; 0x45
 8000562:	f200 80c6 	bhi.w	80006f2 <main+0x3d2>
	  						 if (x_combined < 80) //if the object is center but to the left, slide left
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <main+0x2d4>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2b4f      	cmp	r3, #79	; 0x4f
 800056c:	d85a      	bhi.n	8000624 <main+0x304>
	  							 if (state == 1)
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <main+0x2d8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d108      	bne.n	8000588 <main+0x268>
	  								 move(stop, count);
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <main+0x2bc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	4818      	ldr	r0, [pc, #96]	; (80005e0 <main+0x2c0>)
 800057e:	f7ff fe0b 	bl	8000198 <move>
	  								 state = 0;
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <main+0x2d8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	  							 if (state2 == 0)
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <main+0x2dc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d108      	bne.n	80005a2 <main+0x282>
	  								 move(stop, count);
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <main+0x2bc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4812      	ldr	r0, [pc, #72]	; (80005e0 <main+0x2c0>)
 8000598:	f7ff fdfe 	bl	8000198 <move>
	  								 state2 = 1;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0x2dc>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
	  							 move(top_left,countb);
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <main+0x2e0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <main+0x2fc>)
 80005aa:	f7ff fdf5 	bl	8000198 <move>
	  						      sprintf(blocks_msg, " Top-Left ");
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	491b      	ldr	r1, [pc, #108]	; (8000620 <main+0x300>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fe4c 	bl	8002250 <siprintf>
	  						      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fdc6 	bl	800014c <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	230a      	movs	r3, #10
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x2cc>)
 80005ca:	f001 fc02 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 80005ce:	e13c      	b.n	800084a <main+0x52a>
 80005d0:	200001b8 	.word	0x200001b8
 80005d4:	40011000 	.word	0x40011000
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	20000008 	.word	0x20000008
 80005e4:	200001c2 	.word	0x200001c2
 80005e8:	08002c44 	.word	0x08002c44
 80005ec:	20000108 	.word	0x20000108
 80005f0:	200001be 	.word	0x200001be
 80005f4:	200001ba 	.word	0x200001ba
 80005f8:	200001c4 	.word	0x200001c4
 80005fc:	20000034 	.word	0x20000034
 8000600:	20000030 	.word	0x20000030
 8000604:	2000001c 	.word	0x2000001c
 8000608:	08002c4c 	.word	0x08002c4c
 800060c:	20000020 	.word	0x20000020
 8000610:	08002c58 	.word	0x08002c58
 8000614:	20000010 	.word	0x20000010
 8000618:	08002c64 	.word	0x08002c64
 800061c:	20000014 	.word	0x20000014
 8000620:	08002c70 	.word	0x08002c70
	  						 else if (x_combined > 220) //if the object is center but to the right, slide right
 8000624:	4b8a      	ldr	r3, [pc, #552]	; (8000850 <main+0x530>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	2bdc      	cmp	r3, #220	; 0xdc
 800062a:	d930      	bls.n	800068e <main+0x36e>
	  							 if (state == 1)
 800062c:	4b89      	ldr	r3, [pc, #548]	; (8000854 <main+0x534>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d108      	bne.n	8000646 <main+0x326>
	  								 move(stop, count);
 8000634:	4b88      	ldr	r3, [pc, #544]	; (8000858 <main+0x538>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	4888      	ldr	r0, [pc, #544]	; (800085c <main+0x53c>)
 800063c:	f7ff fdac 	bl	8000198 <move>
	  								 state = 0;
 8000640:	4b84      	ldr	r3, [pc, #528]	; (8000854 <main+0x534>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
	  							 if (state2 == 0)
 8000646:	4b86      	ldr	r3, [pc, #536]	; (8000860 <main+0x540>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d108      	bne.n	8000660 <main+0x340>
	  								 move(stop, count);
 800064e:	4b82      	ldr	r3, [pc, #520]	; (8000858 <main+0x538>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	4881      	ldr	r0, [pc, #516]	; (800085c <main+0x53c>)
 8000656:	f7ff fd9f 	bl	8000198 <move>
	  								 state2 = 1;
 800065a:	4b81      	ldr	r3, [pc, #516]	; (8000860 <main+0x540>)
 800065c:	2201      	movs	r2, #1
 800065e:	601a      	str	r2, [r3, #0]
	  							 move(top_right, countb);
 8000660:	4b80      	ldr	r3, [pc, #512]	; (8000864 <main+0x544>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4880      	ldr	r0, [pc, #512]	; (8000868 <main+0x548>)
 8000668:	f7ff fd96 	bl	8000198 <move>
	  						      sprintf(blocks_msg, " Top-Right ");
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	497f      	ldr	r1, [pc, #508]	; (800086c <main+0x54c>)
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fded 	bl	8002250 <siprintf>
	  						      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fd67 	bl	800014c <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	230a      	movs	r3, #10
 8000686:	487a      	ldr	r0, [pc, #488]	; (8000870 <main+0x550>)
 8000688:	f001 fba3 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 800068c:	e0dd      	b.n	800084a <main+0x52a>
	  							 state = 1;
 800068e:	4b71      	ldr	r3, [pc, #452]	; (8000854 <main+0x534>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
	  							 state2 = 0;
 8000694:	4b72      	ldr	r3, [pc, #456]	; (8000860 <main+0x540>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
	  							 if (width_combined > 50)
 800069a:	4b76      	ldr	r3, [pc, #472]	; (8000874 <main+0x554>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	2b32      	cmp	r3, #50	; 0x32
 80006a0:	d909      	bls.n	80006b6 <main+0x396>
	  								 forward[2] = 40;
 80006a2:	4b75      	ldr	r3, [pc, #468]	; (8000878 <main+0x558>)
 80006a4:	2228      	movs	r2, #40	; 0x28
 80006a6:	709a      	strb	r2, [r3, #2]
	  								 move(forward, count);
 80006a8:	4b6b      	ldr	r3, [pc, #428]	; (8000858 <main+0x538>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4872      	ldr	r0, [pc, #456]	; (8000878 <main+0x558>)
 80006b0:	f7ff fd72 	bl	8000198 <move>
 80006b4:	e00c      	b.n	80006d0 <main+0x3b0>
	  							 else if (width_combined <= 50 )
 80006b6:	4b6f      	ldr	r3, [pc, #444]	; (8000874 <main+0x554>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	2b32      	cmp	r3, #50	; 0x32
 80006bc:	d808      	bhi.n	80006d0 <main+0x3b0>
	  								 forward[2] = 80;
 80006be:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <main+0x558>)
 80006c0:	2250      	movs	r2, #80	; 0x50
 80006c2:	709a      	strb	r2, [r3, #2]
	  								 move(forward, count);
 80006c4:	4b64      	ldr	r3, [pc, #400]	; (8000858 <main+0x538>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	486b      	ldr	r0, [pc, #428]	; (8000878 <main+0x558>)
 80006cc:	f7ff fd64 	bl	8000198 <move>
	  						      sprintf(blocks_msg, " Forward ");
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	496a      	ldr	r1, [pc, #424]	; (800087c <main+0x55c>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fdbb 	bl	8002250 <siprintf>
	  						      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd35 	bl	800014c <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	1d39      	adds	r1, r7, #4
 80006e8:	230a      	movs	r3, #10
 80006ea:	4861      	ldr	r0, [pc, #388]	; (8000870 <main+0x550>)
 80006ec:	f001 fb71 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 80006f0:	e0ab      	b.n	800084a <main+0x52a>
	  				 else if (width_combined <= 120 && width_combined >= 70) //within desired range
 80006f2:	4b60      	ldr	r3, [pc, #384]	; (8000874 <main+0x554>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2b78      	cmp	r3, #120	; 0x78
 80006f8:	f200 80a7 	bhi.w	800084a <main+0x52a>
 80006fc:	4b5d      	ldr	r3, [pc, #372]	; (8000874 <main+0x554>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b45      	cmp	r3, #69	; 0x45
 8000702:	f240 80a2 	bls.w	800084a <main+0x52a>
	  					 if (x_combined >=80 && x_combined <= 220) //if the object is in the center, stop
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <main+0x530>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	2b4f      	cmp	r3, #79	; 0x4f
 800070c:	d91b      	bls.n	8000746 <main+0x426>
 800070e:	4b50      	ldr	r3, [pc, #320]	; (8000850 <main+0x530>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2bdc      	cmp	r3, #220	; 0xdc
 8000714:	d817      	bhi.n	8000746 <main+0x426>
	  						 move(stop,count);
 8000716:	4b50      	ldr	r3, [pc, #320]	; (8000858 <main+0x538>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4619      	mov	r1, r3
 800071c:	484f      	ldr	r0, [pc, #316]	; (800085c <main+0x53c>)
 800071e:	f7ff fd3b 	bl	8000198 <move>
	  					      sprintf(blocks_msg, " Stop ");
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4956      	ldr	r1, [pc, #344]	; (8000880 <main+0x560>)
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd92 	bl	8002250 <siprintf>
	  					      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd0c 	bl	800014c <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	1d39      	adds	r1, r7, #4
 800073a:	230a      	movs	r3, #10
 800073c:	484c      	ldr	r0, [pc, #304]	; (8000870 <main+0x550>)
 800073e:	f001 fb48 	bl	8001dd2 <HAL_UART_Transmit>
	  					 {
 8000742:	bf00      	nop
	  			 break;
 8000744:	e081      	b.n	800084a <main+0x52a>
	  					 else if (x_combined < 80) //if the object is center but to the left, slide left
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <main+0x530>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	2b4f      	cmp	r3, #79	; 0x4f
 800074c:	d82e      	bhi.n	80007ac <main+0x48c>
	  						state = 1;
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <main+0x534>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
	  						 if (x_combined > 70)
 8000754:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <main+0x530>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b46      	cmp	r3, #70	; 0x46
 800075a:	d909      	bls.n	8000770 <main+0x450>
	  							 side_left[2] = 40;
 800075c:	4b49      	ldr	r3, [pc, #292]	; (8000884 <main+0x564>)
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	709a      	strb	r2, [r3, #2]
	  							 move(side_left, count);
 8000762:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <main+0x538>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4846      	ldr	r0, [pc, #280]	; (8000884 <main+0x564>)
 800076a:	f7ff fd15 	bl	8000198 <move>
 800076e:	e00c      	b.n	800078a <main+0x46a>
	  						 else if (x_combined <= 70 )
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <main+0x530>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b46      	cmp	r3, #70	; 0x46
 8000776:	d808      	bhi.n	800078a <main+0x46a>
	  							 side_left[2] = 80;
 8000778:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x564>)
 800077a:	2250      	movs	r2, #80	; 0x50
 800077c:	709a      	strb	r2, [r3, #2]
	  							 move(side_left, count);
 800077e:	4b36      	ldr	r3, [pc, #216]	; (8000858 <main+0x538>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	483f      	ldr	r0, [pc, #252]	; (8000884 <main+0x564>)
 8000786:	f7ff fd07 	bl	8000198 <move>
	  					      sprintf(blocks_msg, " Slide-Left ");
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	493e      	ldr	r1, [pc, #248]	; (8000888 <main+0x568>)
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fd5e 	bl	8002250 <siprintf>
	  					      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fcd8 	bl	800014c <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	230a      	movs	r3, #10
 80007a4:	4832      	ldr	r0, [pc, #200]	; (8000870 <main+0x550>)
 80007a6:	f001 fb14 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 80007aa:	e04e      	b.n	800084a <main+0x52a>
	  					 else if (x_combined > 220) //if the object is center but to the right, slide right
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <main+0x530>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	2bdc      	cmp	r3, #220	; 0xdc
 80007b2:	d94a      	bls.n	800084a <main+0x52a>
	  						 state = 1;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <main+0x534>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
	  						 if (x_combined < 240)
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <main+0x530>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	2bef      	cmp	r3, #239	; 0xef
 80007c0:	d809      	bhi.n	80007d6 <main+0x4b6>
	  							 side_right[2] = 40;
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <main+0x56c>)
 80007c4:	2228      	movs	r2, #40	; 0x28
 80007c6:	709a      	strb	r2, [r3, #2]
	  							 move(side_right, count);
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <main+0x538>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	482f      	ldr	r0, [pc, #188]	; (800088c <main+0x56c>)
 80007d0:	f7ff fce2 	bl	8000198 <move>
 80007d4:	e00c      	b.n	80007f0 <main+0x4d0>
	  						 else if (x_combined >= 240 )
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <main+0x530>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	2bef      	cmp	r3, #239	; 0xef
 80007dc:	d908      	bls.n	80007f0 <main+0x4d0>
	  							 side_right[2] = 80;
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <main+0x56c>)
 80007e0:	2250      	movs	r2, #80	; 0x50
 80007e2:	709a      	strb	r2, [r3, #2]
	  							 move(side_right, count);
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <main+0x538>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4828      	ldr	r0, [pc, #160]	; (800088c <main+0x56c>)
 80007ec:	f7ff fcd4 	bl	8000198 <move>
	  					      sprintf(blocks_msg, " Slide-Right ");
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4927      	ldr	r1, [pc, #156]	; (8000890 <main+0x570>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fd2b 	bl	8002250 <siprintf>
	  					      HAL_UART_Transmit(&huart2, (uint8_t*)blocks_msg, strlen(blocks_msg), 10);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fca5 	bl	800014c <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	1d39      	adds	r1, r7, #4
 8000808:	230a      	movs	r3, #10
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <main+0x550>)
 800080c:	f001 fae1 	bl	8001dd2 <HAL_UART_Transmit>
	  			 break;
 8000810:	e01b      	b.n	800084a <main+0x52a>


	  		 case 2:
	  			 //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
	  			     //HAL_Delay(1000);
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	481e      	ldr	r0, [pc, #120]	; (8000894 <main+0x574>)
 800081a:	f000 fe39 	bl	8001490 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	481c      	ldr	r0, [pc, #112]	; (8000898 <main+0x578>)
 8000826:	f000 fe33 	bl	8001490 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000830:	4819      	ldr	r0, [pc, #100]	; (8000898 <main+0x578>)
 8000832:	f000 fe2d 	bl	8001490 <HAL_GPIO_WritePin>
	  			HAL_Delay(50);
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f000 fb74 	bl	8000f24 <HAL_Delay>

	  			move(stop, count);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <main+0x538>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <main+0x53c>)
 8000844:	f7ff fca8 	bl	8000198 <move>




	  		break;
 8000848:	e000      	b.n	800084c <main+0x52c>
	  			 break;
 800084a:	bf00      	nop
	  	 getBlocks(1, 1);
 800084c:	e577      	b.n	800033e <main+0x1e>
 800084e:	bf00      	nop
 8000850:	200001ba 	.word	0x200001ba
 8000854:	200001c4 	.word	0x200001c4
 8000858:	2000002c 	.word	0x2000002c
 800085c:	20000008 	.word	0x20000008
 8000860:	20000034 	.word	0x20000034
 8000864:	20000030 	.word	0x20000030
 8000868:	20000018 	.word	0x20000018
 800086c:	08002c7c 	.word	0x08002c7c
 8000870:	20000108 	.word	0x20000108
 8000874:	200001be 	.word	0x200001be
 8000878:	2000000c 	.word	0x2000000c
 800087c:	08002c88 	.word	0x08002c88
 8000880:	08002c44 	.word	0x08002c44
 8000884:	20000024 	.word	0x20000024
 8000888:	08002c94 	.word	0x08002c94
 800088c:	20000028 	.word	0x20000028
 8000890:	08002ca4 	.word	0x08002ca4
 8000894:	40011000 	.word	0x40011000
 8000898:	40010c00 	.word	0x40010c00

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	; 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fcc8 	bl	8002240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2310      	movs	r3, #16
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fe11 	bl	8001504 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008e8:	f000 f93c 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f87e 	bl	8001a08 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000912:	f000 f927 	bl	8000b64 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3740      	adds	r7, #64	; 0x40
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART1_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000958:	f001 f9ee 	bl	8001d38 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f8ff 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c4 	.word	0x200000c4
 8000970:	40013800 	.word	0x40013800

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f001 f9c4 	bl	8001d38 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f8d5 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000108 	.word	0x20000108
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART3_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART3_UART_Init+0x4c>)
 8000a00:	f001 f99a 	bl	8001d38 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f000 f8ab 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000014c 	.word	0x2000014c
 8000a18:	40004800 	.word	0x40004800

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a46      	ldr	r2, [pc, #280]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a40      	ldr	r2, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0320 	and.w	r3, r3, #32
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a3a      	ldr	r2, [pc, #232]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <MX_GPIO_Init+0x134>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2120      	movs	r1, #32
 8000a94:	482f      	ldr	r0, [pc, #188]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000a96:	f000 fcfb 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa0:	482d      	ldr	r0, [pc, #180]	; (8000b58 <MX_GPIO_Init+0x13c>)
 8000aa2:	f000 fcf5 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <MX_GPIO_Init+0x140>)
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4827      	ldr	r0, [pc, #156]	; (8000b58 <MX_GPIO_Init+0x13c>)
 8000abc:	f000 fb64 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <MX_GPIO_Init+0x138>)
 8000ad8:	f000 fb56 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4619      	mov	r1, r3
 8000af4:	4818      	ldr	r0, [pc, #96]	; (8000b58 <MX_GPIO_Init+0x13c>)
 8000af6:	f000 fb47 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x144>)
 8000b14:	f000 fb38 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_GPIO_Init+0x144>)
 8000b32:	f000 fb29 	bl	8001188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2028      	movs	r0, #40	; 0x28
 8000b3c:	f000 faed 	bl	800111a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f000 fb06 	bl	8001152 <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	40010c00 	.word	0x40010c00

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x5c>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_MspInit+0x60>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_MspInit+0x60>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <HAL_UART_MspInit+0x150>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d132      	bne.n	8000c5a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf4:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b49      	ldr	r3, [pc, #292]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a45      	ldr	r2, [pc, #276]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	4619      	mov	r1, r3
 8000c38:	483c      	ldr	r0, [pc, #240]	; (8000d2c <HAL_UART_MspInit+0x158>)
 8000c3a:	f000 faa5 	bl	8001188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	4619      	mov	r1, r3
 8000c52:	4836      	ldr	r0, [pc, #216]	; (8000d2c <HAL_UART_MspInit+0x158>)
 8000c54:	f000 fa98 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c58:	e060      	b.n	8000d1c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <HAL_UART_MspInit+0x15c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d124      	bne.n	8000cae <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c64:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	4a2f      	ldr	r2, [pc, #188]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6e:	61d3      	str	r3, [r2, #28]
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c94:	230c      	movs	r3, #12
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4821      	ldr	r0, [pc, #132]	; (8000d2c <HAL_UART_MspInit+0x158>)
 8000ca8:	f000 fa6e 	bl	8001188 <HAL_GPIO_Init>
}
 8000cac:	e036      	b.n	8000d1c <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <HAL_UART_MspInit+0x160>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d131      	bne.n	8000d1c <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_UART_MspInit+0x154>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_UART_MspInit+0x164>)
 8000cfe:	f000 fa43 	bl	8001188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4619      	mov	r1, r3
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <HAL_UART_MspInit+0x164>)
 8000d18:	f000 fa36 	bl	8001188 <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	; 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013800 	.word	0x40013800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40004800 	.word	0x40004800
 8000d38:	40010c00 	.word	0x40010c00

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f8b3 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d92:	f000 fb95 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f001 fa0e 	bl	80021ec <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20005000 	.word	0x20005000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200001c8 	.word	0x200001c8
 8000e04:	200001e0 	.word	0x200001e0

08000e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e3a:	f7ff ffe5 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 f9db 	bl	80021f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff fa6d 	bl	8000320 <main>
  bx lr
 8000e46:	4770      	bx	lr
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000e50:	08002d18 	.word	0x08002d18
  ldr r2, =_sbss
 8000e54:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000e58:	200001e0 	.word	0x200001e0

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f947 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe78 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f95f 	bl	800116e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f927 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000038 	.word	0x20000038
 8000ee4:	20000040 	.word	0x20000040
 8000ee8:	2000003c 	.word	0x2000003c

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000040 	.word	0x20000040
 8000f0c:	200001cc 	.word	0x200001cc

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	200001cc 	.word	0x200001cc

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000040 	.word	0x20000040

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4906      	ldr	r1, [pc, #24]	; (8001004 <__NVIC_EnableIRQ+0x34>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff90 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff2d 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff42 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff35 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e169      	b.n	8001470 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800119c:	2201      	movs	r2, #1
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8158 	bne.w	800146a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4a9a      	ldr	r2, [pc, #616]	; (8001428 <HAL_GPIO_Init+0x2a0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d05e      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011c4:	4a98      	ldr	r2, [pc, #608]	; (8001428 <HAL_GPIO_Init+0x2a0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d875      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011ca:	4a98      	ldr	r2, [pc, #608]	; (800142c <HAL_GPIO_Init+0x2a4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d058      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011d0:	4a96      	ldr	r2, [pc, #600]	; (800142c <HAL_GPIO_Init+0x2a4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d86f      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011d6:	4a96      	ldr	r2, [pc, #600]	; (8001430 <HAL_GPIO_Init+0x2a8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d052      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011dc:	4a94      	ldr	r2, [pc, #592]	; (8001430 <HAL_GPIO_Init+0x2a8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d869      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011e2:	4a94      	ldr	r2, [pc, #592]	; (8001434 <HAL_GPIO_Init+0x2ac>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d04c      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011e8:	4a92      	ldr	r2, [pc, #584]	; (8001434 <HAL_GPIO_Init+0x2ac>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d863      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011ee:	4a92      	ldr	r2, [pc, #584]	; (8001438 <HAL_GPIO_Init+0x2b0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d046      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
 80011f4:	4a90      	ldr	r2, [pc, #576]	; (8001438 <HAL_GPIO_Init+0x2b0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d85d      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 80011fa:	2b12      	cmp	r3, #18
 80011fc:	d82a      	bhi.n	8001254 <HAL_GPIO_Init+0xcc>
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d859      	bhi.n	80012b6 <HAL_GPIO_Init+0x12e>
 8001202:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <HAL_GPIO_Init+0x80>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001283 	.word	0x08001283
 800120c:	0800125d 	.word	0x0800125d
 8001210:	0800126f 	.word	0x0800126f
 8001214:	080012b1 	.word	0x080012b1
 8001218:	080012b7 	.word	0x080012b7
 800121c:	080012b7 	.word	0x080012b7
 8001220:	080012b7 	.word	0x080012b7
 8001224:	080012b7 	.word	0x080012b7
 8001228:	080012b7 	.word	0x080012b7
 800122c:	080012b7 	.word	0x080012b7
 8001230:	080012b7 	.word	0x080012b7
 8001234:	080012b7 	.word	0x080012b7
 8001238:	080012b7 	.word	0x080012b7
 800123c:	080012b7 	.word	0x080012b7
 8001240:	080012b7 	.word	0x080012b7
 8001244:	080012b7 	.word	0x080012b7
 8001248:	080012b7 	.word	0x080012b7
 800124c:	08001265 	.word	0x08001265
 8001250:	08001279 	.word	0x08001279
 8001254:	4a79      	ldr	r2, [pc, #484]	; (800143c <HAL_GPIO_Init+0x2b4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800125a:	e02c      	b.n	80012b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e029      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e024      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	3308      	adds	r3, #8
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e01f      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	330c      	adds	r3, #12
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e01a      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800128a:	2304      	movs	r3, #4
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e013      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d105      	bne.n	80012a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001298:	2308      	movs	r3, #8
 800129a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	611a      	str	r2, [r3, #16]
          break;
 80012a2:	e009      	b.n	80012b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	615a      	str	r2, [r3, #20]
          break;
 80012ae:	e003      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x130>
          break;
 80012b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d801      	bhi.n	80012c2 <HAL_GPIO_Init+0x13a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e001      	b.n	80012c6 <HAL_GPIO_Init+0x13e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d802      	bhi.n	80012d4 <HAL_GPIO_Init+0x14c>
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x152>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	3b08      	subs	r3, #8
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	210f      	movs	r1, #15
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	6a39      	ldr	r1, [r7, #32]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80b1 	beq.w	800146a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001308:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x2b8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a4c      	ldr	r2, [pc, #304]	; (8001440 <HAL_GPIO_Init+0x2b8>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_GPIO_Init+0x2b8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001320:	4a48      	ldr	r2, [pc, #288]	; (8001444 <HAL_GPIO_Init+0x2bc>)
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a40      	ldr	r2, [pc, #256]	; (8001448 <HAL_GPIO_Init+0x2c0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x1ec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3f      	ldr	r2, [pc, #252]	; (800144c <HAL_GPIO_Init+0x2c4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1e8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_GPIO_Init+0x2c8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3d      	ldr	r2, [pc, #244]	; (8001454 <HAL_GPIO_Init+0x2cc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1e0>
 8001364:	2303      	movs	r3, #3
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001368:	2304      	movs	r3, #4
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001374:	2300      	movs	r3, #0
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001386:	492f      	ldr	r1, [pc, #188]	; (8001444 <HAL_GPIO_Init+0x2bc>)
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	492c      	ldr	r1, [pc, #176]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4928      	ldr	r1, [pc, #160]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4922      	ldr	r1, [pc, #136]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	491e      	ldr	r1, [pc, #120]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	4918      	ldr	r1, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4914      	ldr	r1, [pc, #80]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d021      	beq.n	800145c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
 8001424:	e021      	b.n	800146a <HAL_GPIO_Init+0x2e2>
 8001426:	bf00      	nop
 8001428:	10320000 	.word	0x10320000
 800142c:	10310000 	.word	0x10310000
 8001430:	10220000 	.word	0x10220000
 8001434:	10210000 	.word	0x10210000
 8001438:	10120000 	.word	0x10120000
 800143c:	10110000 	.word	0x10110000
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40011000 	.word	0x40011000
 8001454:	40011400 	.word	0x40011400
 8001458:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_GPIO_Init+0x304>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	43db      	mvns	r3, r3
 8001464:	4909      	ldr	r1, [pc, #36]	; (800148c <HAL_GPIO_Init+0x304>)
 8001466:	4013      	ands	r3, r2
 8001468:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	3301      	adds	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	fa22 f303 	lsr.w	r3, r2, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	f47f ae8e 	bne.w	800119c <HAL_GPIO_Init+0x14>
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	372c      	adds	r7, #44	; 0x2c
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f806 	bl	80014f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e272      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	4b92      	ldr	r3, [pc, #584]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001530:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
 800153c:	4b8c      	ldr	r3, [pc, #560]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e24c      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x76>
 800156c:	4b80      	ldr	r3, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7a      	ldr	r2, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xbc>
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a71      	ldr	r2, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6e      	ldr	r2, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 80015c0:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a67      	ldr	r2, [pc, #412]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc96 	bl	8000f10 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fc92 	bl	8000f10 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e200      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe4>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc82 	bl	8000f10 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc7e 	bl	8000f10 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ec      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x10c>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164a:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1c0      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4939      	ldr	r1, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fc37 	bl	8000f10 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc33 	bl	8000f10 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1a1      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4927      	ldr	r1, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc16 	bl	8000f10 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fc12 	bl	8000f10 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e180      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fbf6 	bl	8000f10 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fbf2 	bl	8000f10 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e160      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fad8 	bl	8001cfc <RCC_Delay>
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fbdc 	bl	8000f10 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fbd8 	bl	8000f10 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d908      	bls.n	800177c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e146      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420000 	.word	0x42420000
 8001778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e9      	bne.n	800175c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a6 	beq.w	80018e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a87      	ldr	r2, [pc, #540]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b82      	ldr	r3, [pc, #520]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7e      	ldr	r2, [pc, #504]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff fb99 	bl	8000f10 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fb95 	bl	8000f10 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e103      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x312>
 8001808:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e02d      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x334>
 800181e:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a69      	ldr	r2, [pc, #420]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a66      	ldr	r2, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	e01c      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x356>
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a60      	ldr	r2, [pc, #384]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a5d      	ldr	r2, [pc, #372]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a5a      	ldr	r2, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb49 	bl	8000f10 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fb45 	bl	8000f10 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0b1      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCC_OscConfig+0x37e>
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb33 	bl	8000f10 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fb2f 	bl	8000f10 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e09b      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d061      	beq.n	80019bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d146      	bne.n	800198e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb03 	bl	8000f10 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff faff 	bl	8000f10 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e06d      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d108      	bne.n	8001948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4921      	ldr	r1, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a19      	ldr	r1, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	430b      	orrs	r3, r1
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fad3 	bl	8000f10 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff facf 	bl	8000f10 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e03d      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x46a>
 800198c:	e035      	b.n	80019fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fabc 	bl	8000f10 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fab8 	bl	8000f10 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e026      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x498>
 80019ba:	e01e      	b.n	80019fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e019      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x500>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d0      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4965      	ldr	r1, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d040      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e073      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4936      	ldr	r1, [pc, #216]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa0a 	bl	8000f10 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff fa06 	bl	8000f10 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e053      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d210      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f968 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08002cc4 	.word	0x08002cc4
 8001bd4:	20000038 	.word	0x20000038
 8001bd8:	2000003c 	.word	0x2000003c

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b490      	push	{r4, r7}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xac>)
 8001be4:	1d3c      	adds	r4, r7, #4
 8001be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bec:	f240 2301 	movw	r3, #513	; 0x201
 8001bf0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x46>
 8001c1a:	e02b      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	e02b      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3328      	adds	r3, #40	; 0x28
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c32:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0c5b      	lsrs	r3, r3, #17
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	3328      	adds	r3, #40	; 0x28
 8001c4a:	443b      	add	r3, r7
 8001c4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c56:	fb03 f202 	mul.w	r2, r3, r2
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
 8001c62:	e004      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	623b      	str	r3, [r7, #32]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c76:	623b      	str	r3, [r7, #32]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc90      	pop	{r4, r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	08002cb4 	.word	0x08002cb4
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	003d0900 	.word	0x003d0900

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000038 	.word	0x20000038

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff2 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08002cd4 	.word	0x08002cd4

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08002cd4 	.word	0x08002cd4

08001cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <RCC_Delay+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <RCC_Delay+0x38>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d18:	bf00      	nop
  }
  while (Delay --);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <RCC_Delay+0x1c>
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000038 	.word	0x20000038
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e03f      	b.n	8001dca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe ff38 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f9a7 	bl	80020d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b08a      	sub	sp, #40	; 0x28
 8001dd6:	af02      	add	r7, sp, #8
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d17c      	bne.n	8001eec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_UART_Transmit+0x2c>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e075      	b.n	8001eee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_UART_Transmit+0x3e>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e06e      	b.n	8001eee <HAL_UART_Transmit+0x11c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2221      	movs	r2, #33	; 0x21
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e26:	f7ff f873 	bl	8000f10 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e40:	d108      	bne.n	8001e54 <HAL_UART_Transmit+0x82>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e003      	b.n	8001e5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e64:	e02a      	b.n	8001ebc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f8e2 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e036      	b.n	8001eee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e007      	b.n	8001eae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1cf      	bne.n	8001e66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f8b2 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e006      	b.n	8001eee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b08a      	sub	sp, #40	; 0x28
 8001efa:	af02      	add	r7, sp, #8
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	f040 808c 	bne.w	8002030 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_UART_Receive+0x2e>
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e084      	b.n	8002032 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Receive+0x40>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e07d      	b.n	8002032 <HAL_UART_Receive+0x13c>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2222      	movs	r2, #34	; 0x22
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f52:	f7fe ffdd 	bl	8000f10 <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6c:	d108      	bne.n	8001f80 <HAL_UART_Receive+0x8a>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d104      	bne.n	8001f80 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e003      	b.n	8001f88 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f90:	e043      	b.n	800201a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f84c 	bl	800203a <UART_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e042      	b.n	8002032 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e01f      	b.n	800200c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd4:	d007      	beq.n	8001fe6 <HAL_UART_Receive+0xf0>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_UART_Receive+0xfe>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e008      	b.n	8002006 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002000:	b2da      	uxtb	r2, r3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1b6      	bne.n	8001f92 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204a:	e02c      	b.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002052:	d028      	beq.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <UART_WaitOnFlagUntilTimeout+0x30>
 800205a:	f7fe ff59 	bl	8000f10 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	429a      	cmp	r2, r3
 8002068:	d21d      	bcs.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002078:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e00f      	b.n	80020c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4013      	ands	r3, r2
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d0c3      	beq.n	800204c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800210a:	f023 030c 	bic.w	r3, r3, #12
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	430b      	orrs	r3, r1
 8002116:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <UART_SetConfig+0x114>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d103      	bne.n	8002140 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002138:	f7ff fdcc 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	e002      	b.n	8002146 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002140:	f7ff fdb4 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002144:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <UART_SetConfig+0x118>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	0119      	lsls	r1, r3, #4
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	441a      	add	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fbb2 f2f3 	udiv	r2, r2, r3
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <UART_SetConfig+0x118>)
 800217e:	fba3 0302 	umull	r0, r3, r3, r2
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2064      	movs	r0, #100	; 0x64
 8002186:	fb00 f303 	mul.w	r3, r0, r3
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	3332      	adds	r3, #50	; 0x32
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <UART_SetConfig+0x118>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	4419      	add	r1, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009a      	lsls	r2, r3, #2
 80021a8:	441a      	add	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <UART_SetConfig+0x118>)
 80021b6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2064      	movs	r0, #100	; 0x64
 80021be:	fb00 f303 	mul.w	r3, r0, r3
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	3332      	adds	r3, #50	; 0x32
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <UART_SetConfig+0x118>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	440a      	add	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40013800 	.word	0x40013800
 80021e8:	51eb851f 	.word	0x51eb851f

080021ec <__errno>:
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <__errno+0x8>)
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000044 	.word	0x20000044

080021f8 <__libc_init_array>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	2600      	movs	r6, #0
 80021fc:	4d0c      	ldr	r5, [pc, #48]	; (8002230 <__libc_init_array+0x38>)
 80021fe:	4c0d      	ldr	r4, [pc, #52]	; (8002234 <__libc_init_array+0x3c>)
 8002200:	1b64      	subs	r4, r4, r5
 8002202:	10a4      	asrs	r4, r4, #2
 8002204:	42a6      	cmp	r6, r4
 8002206:	d109      	bne.n	800221c <__libc_init_array+0x24>
 8002208:	f000 fc9c 	bl	8002b44 <_init>
 800220c:	2600      	movs	r6, #0
 800220e:	4d0a      	ldr	r5, [pc, #40]	; (8002238 <__libc_init_array+0x40>)
 8002210:	4c0a      	ldr	r4, [pc, #40]	; (800223c <__libc_init_array+0x44>)
 8002212:	1b64      	subs	r4, r4, r5
 8002214:	10a4      	asrs	r4, r4, #2
 8002216:	42a6      	cmp	r6, r4
 8002218:	d105      	bne.n	8002226 <__libc_init_array+0x2e>
 800221a:	bd70      	pop	{r4, r5, r6, pc}
 800221c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002220:	4798      	blx	r3
 8002222:	3601      	adds	r6, #1
 8002224:	e7ee      	b.n	8002204 <__libc_init_array+0xc>
 8002226:	f855 3b04 	ldr.w	r3, [r5], #4
 800222a:	4798      	blx	r3
 800222c:	3601      	adds	r6, #1
 800222e:	e7f2      	b.n	8002216 <__libc_init_array+0x1e>
 8002230:	08002d10 	.word	0x08002d10
 8002234:	08002d10 	.word	0x08002d10
 8002238:	08002d10 	.word	0x08002d10
 800223c:	08002d14 	.word	0x08002d14

08002240 <memset>:
 8002240:	4603      	mov	r3, r0
 8002242:	4402      	add	r2, r0
 8002244:	4293      	cmp	r3, r2
 8002246:	d100      	bne.n	800224a <memset+0xa>
 8002248:	4770      	bx	lr
 800224a:	f803 1b01 	strb.w	r1, [r3], #1
 800224e:	e7f9      	b.n	8002244 <memset+0x4>

08002250 <siprintf>:
 8002250:	b40e      	push	{r1, r2, r3}
 8002252:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002256:	b500      	push	{lr}
 8002258:	b09c      	sub	sp, #112	; 0x70
 800225a:	ab1d      	add	r3, sp, #116	; 0x74
 800225c:	9002      	str	r0, [sp, #8]
 800225e:	9006      	str	r0, [sp, #24]
 8002260:	9107      	str	r1, [sp, #28]
 8002262:	9104      	str	r1, [sp, #16]
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <siprintf+0x38>)
 8002266:	4909      	ldr	r1, [pc, #36]	; (800228c <siprintf+0x3c>)
 8002268:	f853 2b04 	ldr.w	r2, [r3], #4
 800226c:	9105      	str	r1, [sp, #20]
 800226e:	6800      	ldr	r0, [r0, #0]
 8002270:	a902      	add	r1, sp, #8
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f000 f868 	bl	8002348 <_svfiprintf_r>
 8002278:	2200      	movs	r2, #0
 800227a:	9b02      	ldr	r3, [sp, #8]
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	b01c      	add	sp, #112	; 0x70
 8002280:	f85d eb04 	ldr.w	lr, [sp], #4
 8002284:	b003      	add	sp, #12
 8002286:	4770      	bx	lr
 8002288:	20000044 	.word	0x20000044
 800228c:	ffff0208 	.word	0xffff0208

08002290 <__ssputs_r>:
 8002290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002294:	688e      	ldr	r6, [r1, #8]
 8002296:	4682      	mov	sl, r0
 8002298:	429e      	cmp	r6, r3
 800229a:	460c      	mov	r4, r1
 800229c:	4690      	mov	r8, r2
 800229e:	461f      	mov	r7, r3
 80022a0:	d838      	bhi.n	8002314 <__ssputs_r+0x84>
 80022a2:	898a      	ldrh	r2, [r1, #12]
 80022a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022a8:	d032      	beq.n	8002310 <__ssputs_r+0x80>
 80022aa:	6825      	ldr	r5, [r4, #0]
 80022ac:	6909      	ldr	r1, [r1, #16]
 80022ae:	3301      	adds	r3, #1
 80022b0:	eba5 0901 	sub.w	r9, r5, r1
 80022b4:	6965      	ldr	r5, [r4, #20]
 80022b6:	444b      	add	r3, r9
 80022b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022c0:	106d      	asrs	r5, r5, #1
 80022c2:	429d      	cmp	r5, r3
 80022c4:	bf38      	it	cc
 80022c6:	461d      	movcc	r5, r3
 80022c8:	0553      	lsls	r3, r2, #21
 80022ca:	d531      	bpl.n	8002330 <__ssputs_r+0xa0>
 80022cc:	4629      	mov	r1, r5
 80022ce:	f000 fb6f 	bl	80029b0 <_malloc_r>
 80022d2:	4606      	mov	r6, r0
 80022d4:	b950      	cbnz	r0, 80022ec <__ssputs_r+0x5c>
 80022d6:	230c      	movs	r3, #12
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f8ca 3000 	str.w	r3, [sl]
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e6:	81a3      	strh	r3, [r4, #12]
 80022e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ec:	464a      	mov	r2, r9
 80022ee:	6921      	ldr	r1, [r4, #16]
 80022f0:	f000 face 	bl	8002890 <memcpy>
 80022f4:	89a3      	ldrh	r3, [r4, #12]
 80022f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fe:	81a3      	strh	r3, [r4, #12]
 8002300:	6126      	str	r6, [r4, #16]
 8002302:	444e      	add	r6, r9
 8002304:	6026      	str	r6, [r4, #0]
 8002306:	463e      	mov	r6, r7
 8002308:	6165      	str	r5, [r4, #20]
 800230a:	eba5 0509 	sub.w	r5, r5, r9
 800230e:	60a5      	str	r5, [r4, #8]
 8002310:	42be      	cmp	r6, r7
 8002312:	d900      	bls.n	8002316 <__ssputs_r+0x86>
 8002314:	463e      	mov	r6, r7
 8002316:	4632      	mov	r2, r6
 8002318:	4641      	mov	r1, r8
 800231a:	6820      	ldr	r0, [r4, #0]
 800231c:	f000 fac6 	bl	80028ac <memmove>
 8002320:	68a3      	ldr	r3, [r4, #8]
 8002322:	2000      	movs	r0, #0
 8002324:	1b9b      	subs	r3, r3, r6
 8002326:	60a3      	str	r3, [r4, #8]
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	4433      	add	r3, r6
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	e7db      	b.n	80022e8 <__ssputs_r+0x58>
 8002330:	462a      	mov	r2, r5
 8002332:	f000 fbb1 	bl	8002a98 <_realloc_r>
 8002336:	4606      	mov	r6, r0
 8002338:	2800      	cmp	r0, #0
 800233a:	d1e1      	bne.n	8002300 <__ssputs_r+0x70>
 800233c:	4650      	mov	r0, sl
 800233e:	6921      	ldr	r1, [r4, #16]
 8002340:	f000 face 	bl	80028e0 <_free_r>
 8002344:	e7c7      	b.n	80022d6 <__ssputs_r+0x46>
	...

08002348 <_svfiprintf_r>:
 8002348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800234c:	4698      	mov	r8, r3
 800234e:	898b      	ldrh	r3, [r1, #12]
 8002350:	4607      	mov	r7, r0
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	460d      	mov	r5, r1
 8002356:	4614      	mov	r4, r2
 8002358:	b09d      	sub	sp, #116	; 0x74
 800235a:	d50e      	bpl.n	800237a <_svfiprintf_r+0x32>
 800235c:	690b      	ldr	r3, [r1, #16]
 800235e:	b963      	cbnz	r3, 800237a <_svfiprintf_r+0x32>
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	f000 fb25 	bl	80029b0 <_malloc_r>
 8002366:	6028      	str	r0, [r5, #0]
 8002368:	6128      	str	r0, [r5, #16]
 800236a:	b920      	cbnz	r0, 8002376 <_svfiprintf_r+0x2e>
 800236c:	230c      	movs	r3, #12
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	e0d1      	b.n	800251a <_svfiprintf_r+0x1d2>
 8002376:	2340      	movs	r3, #64	; 0x40
 8002378:	616b      	str	r3, [r5, #20]
 800237a:	2300      	movs	r3, #0
 800237c:	9309      	str	r3, [sp, #36]	; 0x24
 800237e:	2320      	movs	r3, #32
 8002380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002384:	2330      	movs	r3, #48	; 0x30
 8002386:	f04f 0901 	mov.w	r9, #1
 800238a:	f8cd 800c 	str.w	r8, [sp, #12]
 800238e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002534 <_svfiprintf_r+0x1ec>
 8002392:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002396:	4623      	mov	r3, r4
 8002398:	469a      	mov	sl, r3
 800239a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800239e:	b10a      	cbz	r2, 80023a4 <_svfiprintf_r+0x5c>
 80023a0:	2a25      	cmp	r2, #37	; 0x25
 80023a2:	d1f9      	bne.n	8002398 <_svfiprintf_r+0x50>
 80023a4:	ebba 0b04 	subs.w	fp, sl, r4
 80023a8:	d00b      	beq.n	80023c2 <_svfiprintf_r+0x7a>
 80023aa:	465b      	mov	r3, fp
 80023ac:	4622      	mov	r2, r4
 80023ae:	4629      	mov	r1, r5
 80023b0:	4638      	mov	r0, r7
 80023b2:	f7ff ff6d 	bl	8002290 <__ssputs_r>
 80023b6:	3001      	adds	r0, #1
 80023b8:	f000 80aa 	beq.w	8002510 <_svfiprintf_r+0x1c8>
 80023bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023be:	445a      	add	r2, fp
 80023c0:	9209      	str	r2, [sp, #36]	; 0x24
 80023c2:	f89a 3000 	ldrb.w	r3, [sl]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80a2 	beq.w	8002510 <_svfiprintf_r+0x1c8>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f04f 32ff 	mov.w	r2, #4294967295
 80023d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023d6:	f10a 0a01 	add.w	sl, sl, #1
 80023da:	9304      	str	r3, [sp, #16]
 80023dc:	9307      	str	r3, [sp, #28]
 80023de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023e2:	931a      	str	r3, [sp, #104]	; 0x68
 80023e4:	4654      	mov	r4, sl
 80023e6:	2205      	movs	r2, #5
 80023e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ec:	4851      	ldr	r0, [pc, #324]	; (8002534 <_svfiprintf_r+0x1ec>)
 80023ee:	f000 fa41 	bl	8002874 <memchr>
 80023f2:	9a04      	ldr	r2, [sp, #16]
 80023f4:	b9d8      	cbnz	r0, 800242e <_svfiprintf_r+0xe6>
 80023f6:	06d0      	lsls	r0, r2, #27
 80023f8:	bf44      	itt	mi
 80023fa:	2320      	movmi	r3, #32
 80023fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002400:	0711      	lsls	r1, r2, #28
 8002402:	bf44      	itt	mi
 8002404:	232b      	movmi	r3, #43	; 0x2b
 8002406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800240a:	f89a 3000 	ldrb.w	r3, [sl]
 800240e:	2b2a      	cmp	r3, #42	; 0x2a
 8002410:	d015      	beq.n	800243e <_svfiprintf_r+0xf6>
 8002412:	4654      	mov	r4, sl
 8002414:	2000      	movs	r0, #0
 8002416:	f04f 0c0a 	mov.w	ip, #10
 800241a:	9a07      	ldr	r2, [sp, #28]
 800241c:	4621      	mov	r1, r4
 800241e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002422:	3b30      	subs	r3, #48	; 0x30
 8002424:	2b09      	cmp	r3, #9
 8002426:	d94e      	bls.n	80024c6 <_svfiprintf_r+0x17e>
 8002428:	b1b0      	cbz	r0, 8002458 <_svfiprintf_r+0x110>
 800242a:	9207      	str	r2, [sp, #28]
 800242c:	e014      	b.n	8002458 <_svfiprintf_r+0x110>
 800242e:	eba0 0308 	sub.w	r3, r0, r8
 8002432:	fa09 f303 	lsl.w	r3, r9, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	46a2      	mov	sl, r4
 800243a:	9304      	str	r3, [sp, #16]
 800243c:	e7d2      	b.n	80023e4 <_svfiprintf_r+0x9c>
 800243e:	9b03      	ldr	r3, [sp, #12]
 8002440:	1d19      	adds	r1, r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	9103      	str	r1, [sp, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	bfbb      	ittet	lt
 800244a:	425b      	neglt	r3, r3
 800244c:	f042 0202 	orrlt.w	r2, r2, #2
 8002450:	9307      	strge	r3, [sp, #28]
 8002452:	9307      	strlt	r3, [sp, #28]
 8002454:	bfb8      	it	lt
 8002456:	9204      	strlt	r2, [sp, #16]
 8002458:	7823      	ldrb	r3, [r4, #0]
 800245a:	2b2e      	cmp	r3, #46	; 0x2e
 800245c:	d10c      	bne.n	8002478 <_svfiprintf_r+0x130>
 800245e:	7863      	ldrb	r3, [r4, #1]
 8002460:	2b2a      	cmp	r3, #42	; 0x2a
 8002462:	d135      	bne.n	80024d0 <_svfiprintf_r+0x188>
 8002464:	9b03      	ldr	r3, [sp, #12]
 8002466:	3402      	adds	r4, #2
 8002468:	1d1a      	adds	r2, r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	9203      	str	r2, [sp, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	bfb8      	it	lt
 8002472:	f04f 33ff 	movlt.w	r3, #4294967295
 8002476:	9305      	str	r3, [sp, #20]
 8002478:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002538 <_svfiprintf_r+0x1f0>
 800247c:	2203      	movs	r2, #3
 800247e:	4650      	mov	r0, sl
 8002480:	7821      	ldrb	r1, [r4, #0]
 8002482:	f000 f9f7 	bl	8002874 <memchr>
 8002486:	b140      	cbz	r0, 800249a <_svfiprintf_r+0x152>
 8002488:	2340      	movs	r3, #64	; 0x40
 800248a:	eba0 000a 	sub.w	r0, r0, sl
 800248e:	fa03 f000 	lsl.w	r0, r3, r0
 8002492:	9b04      	ldr	r3, [sp, #16]
 8002494:	3401      	adds	r4, #1
 8002496:	4303      	orrs	r3, r0
 8002498:	9304      	str	r3, [sp, #16]
 800249a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800249e:	2206      	movs	r2, #6
 80024a0:	4826      	ldr	r0, [pc, #152]	; (800253c <_svfiprintf_r+0x1f4>)
 80024a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024a6:	f000 f9e5 	bl	8002874 <memchr>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d038      	beq.n	8002520 <_svfiprintf_r+0x1d8>
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <_svfiprintf_r+0x1f8>)
 80024b0:	bb1b      	cbnz	r3, 80024fa <_svfiprintf_r+0x1b2>
 80024b2:	9b03      	ldr	r3, [sp, #12]
 80024b4:	3307      	adds	r3, #7
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	3308      	adds	r3, #8
 80024bc:	9303      	str	r3, [sp, #12]
 80024be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024c0:	4433      	add	r3, r6
 80024c2:	9309      	str	r3, [sp, #36]	; 0x24
 80024c4:	e767      	b.n	8002396 <_svfiprintf_r+0x4e>
 80024c6:	460c      	mov	r4, r1
 80024c8:	2001      	movs	r0, #1
 80024ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80024ce:	e7a5      	b.n	800241c <_svfiprintf_r+0xd4>
 80024d0:	2300      	movs	r3, #0
 80024d2:	f04f 0c0a 	mov.w	ip, #10
 80024d6:	4619      	mov	r1, r3
 80024d8:	3401      	adds	r4, #1
 80024da:	9305      	str	r3, [sp, #20]
 80024dc:	4620      	mov	r0, r4
 80024de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024e2:	3a30      	subs	r2, #48	; 0x30
 80024e4:	2a09      	cmp	r2, #9
 80024e6:	d903      	bls.n	80024f0 <_svfiprintf_r+0x1a8>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0c5      	beq.n	8002478 <_svfiprintf_r+0x130>
 80024ec:	9105      	str	r1, [sp, #20]
 80024ee:	e7c3      	b.n	8002478 <_svfiprintf_r+0x130>
 80024f0:	4604      	mov	r4, r0
 80024f2:	2301      	movs	r3, #1
 80024f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80024f8:	e7f0      	b.n	80024dc <_svfiprintf_r+0x194>
 80024fa:	ab03      	add	r3, sp, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	462a      	mov	r2, r5
 8002500:	4638      	mov	r0, r7
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <_svfiprintf_r+0x1fc>)
 8002504:	a904      	add	r1, sp, #16
 8002506:	f3af 8000 	nop.w
 800250a:	1c42      	adds	r2, r0, #1
 800250c:	4606      	mov	r6, r0
 800250e:	d1d6      	bne.n	80024be <_svfiprintf_r+0x176>
 8002510:	89ab      	ldrh	r3, [r5, #12]
 8002512:	065b      	lsls	r3, r3, #25
 8002514:	f53f af2c 	bmi.w	8002370 <_svfiprintf_r+0x28>
 8002518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800251a:	b01d      	add	sp, #116	; 0x74
 800251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002520:	ab03      	add	r3, sp, #12
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	462a      	mov	r2, r5
 8002526:	4638      	mov	r0, r7
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <_svfiprintf_r+0x1fc>)
 800252a:	a904      	add	r1, sp, #16
 800252c:	f000 f87c 	bl	8002628 <_printf_i>
 8002530:	e7eb      	b.n	800250a <_svfiprintf_r+0x1c2>
 8002532:	bf00      	nop
 8002534:	08002cdc 	.word	0x08002cdc
 8002538:	08002ce2 	.word	0x08002ce2
 800253c:	08002ce6 	.word	0x08002ce6
 8002540:	00000000 	.word	0x00000000
 8002544:	08002291 	.word	0x08002291

08002548 <_printf_common>:
 8002548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800254c:	4616      	mov	r6, r2
 800254e:	4699      	mov	r9, r3
 8002550:	688a      	ldr	r2, [r1, #8]
 8002552:	690b      	ldr	r3, [r1, #16]
 8002554:	4607      	mov	r7, r0
 8002556:	4293      	cmp	r3, r2
 8002558:	bfb8      	it	lt
 800255a:	4613      	movlt	r3, r2
 800255c:	6033      	str	r3, [r6, #0]
 800255e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002562:	460c      	mov	r4, r1
 8002564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002568:	b10a      	cbz	r2, 800256e <_printf_common+0x26>
 800256a:	3301      	adds	r3, #1
 800256c:	6033      	str	r3, [r6, #0]
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	0699      	lsls	r1, r3, #26
 8002572:	bf42      	ittt	mi
 8002574:	6833      	ldrmi	r3, [r6, #0]
 8002576:	3302      	addmi	r3, #2
 8002578:	6033      	strmi	r3, [r6, #0]
 800257a:	6825      	ldr	r5, [r4, #0]
 800257c:	f015 0506 	ands.w	r5, r5, #6
 8002580:	d106      	bne.n	8002590 <_printf_common+0x48>
 8002582:	f104 0a19 	add.w	sl, r4, #25
 8002586:	68e3      	ldr	r3, [r4, #12]
 8002588:	6832      	ldr	r2, [r6, #0]
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	42ab      	cmp	r3, r5
 800258e:	dc28      	bgt.n	80025e2 <_printf_common+0x9a>
 8002590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002594:	1e13      	subs	r3, r2, #0
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	bf18      	it	ne
 800259a:	2301      	movne	r3, #1
 800259c:	0692      	lsls	r2, r2, #26
 800259e:	d42d      	bmi.n	80025fc <_printf_common+0xb4>
 80025a0:	4649      	mov	r1, r9
 80025a2:	4638      	mov	r0, r7
 80025a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025a8:	47c0      	blx	r8
 80025aa:	3001      	adds	r0, #1
 80025ac:	d020      	beq.n	80025f0 <_printf_common+0xa8>
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	68e5      	ldr	r5, [r4, #12]
 80025b2:	f003 0306 	and.w	r3, r3, #6
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf18      	it	ne
 80025ba:	2500      	movne	r5, #0
 80025bc:	6832      	ldr	r2, [r6, #0]
 80025be:	f04f 0600 	mov.w	r6, #0
 80025c2:	68a3      	ldr	r3, [r4, #8]
 80025c4:	bf08      	it	eq
 80025c6:	1aad      	subeq	r5, r5, r2
 80025c8:	6922      	ldr	r2, [r4, #16]
 80025ca:	bf08      	it	eq
 80025cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bfc4      	itt	gt
 80025d4:	1a9b      	subgt	r3, r3, r2
 80025d6:	18ed      	addgt	r5, r5, r3
 80025d8:	341a      	adds	r4, #26
 80025da:	42b5      	cmp	r5, r6
 80025dc:	d11a      	bne.n	8002614 <_printf_common+0xcc>
 80025de:	2000      	movs	r0, #0
 80025e0:	e008      	b.n	80025f4 <_printf_common+0xac>
 80025e2:	2301      	movs	r3, #1
 80025e4:	4652      	mov	r2, sl
 80025e6:	4649      	mov	r1, r9
 80025e8:	4638      	mov	r0, r7
 80025ea:	47c0      	blx	r8
 80025ec:	3001      	adds	r0, #1
 80025ee:	d103      	bne.n	80025f8 <_printf_common+0xb0>
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f8:	3501      	adds	r5, #1
 80025fa:	e7c4      	b.n	8002586 <_printf_common+0x3e>
 80025fc:	2030      	movs	r0, #48	; 0x30
 80025fe:	18e1      	adds	r1, r4, r3
 8002600:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800260a:	4422      	add	r2, r4
 800260c:	3302      	adds	r3, #2
 800260e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002612:	e7c5      	b.n	80025a0 <_printf_common+0x58>
 8002614:	2301      	movs	r3, #1
 8002616:	4622      	mov	r2, r4
 8002618:	4649      	mov	r1, r9
 800261a:	4638      	mov	r0, r7
 800261c:	47c0      	blx	r8
 800261e:	3001      	adds	r0, #1
 8002620:	d0e6      	beq.n	80025f0 <_printf_common+0xa8>
 8002622:	3601      	adds	r6, #1
 8002624:	e7d9      	b.n	80025da <_printf_common+0x92>
	...

08002628 <_printf_i>:
 8002628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800262c:	7e0f      	ldrb	r7, [r1, #24]
 800262e:	4691      	mov	r9, r2
 8002630:	2f78      	cmp	r7, #120	; 0x78
 8002632:	4680      	mov	r8, r0
 8002634:	460c      	mov	r4, r1
 8002636:	469a      	mov	sl, r3
 8002638:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800263a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800263e:	d807      	bhi.n	8002650 <_printf_i+0x28>
 8002640:	2f62      	cmp	r7, #98	; 0x62
 8002642:	d80a      	bhi.n	800265a <_printf_i+0x32>
 8002644:	2f00      	cmp	r7, #0
 8002646:	f000 80d9 	beq.w	80027fc <_printf_i+0x1d4>
 800264a:	2f58      	cmp	r7, #88	; 0x58
 800264c:	f000 80a4 	beq.w	8002798 <_printf_i+0x170>
 8002650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002658:	e03a      	b.n	80026d0 <_printf_i+0xa8>
 800265a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800265e:	2b15      	cmp	r3, #21
 8002660:	d8f6      	bhi.n	8002650 <_printf_i+0x28>
 8002662:	a101      	add	r1, pc, #4	; (adr r1, 8002668 <_printf_i+0x40>)
 8002664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002668:	080026c1 	.word	0x080026c1
 800266c:	080026d5 	.word	0x080026d5
 8002670:	08002651 	.word	0x08002651
 8002674:	08002651 	.word	0x08002651
 8002678:	08002651 	.word	0x08002651
 800267c:	08002651 	.word	0x08002651
 8002680:	080026d5 	.word	0x080026d5
 8002684:	08002651 	.word	0x08002651
 8002688:	08002651 	.word	0x08002651
 800268c:	08002651 	.word	0x08002651
 8002690:	08002651 	.word	0x08002651
 8002694:	080027e3 	.word	0x080027e3
 8002698:	08002705 	.word	0x08002705
 800269c:	080027c5 	.word	0x080027c5
 80026a0:	08002651 	.word	0x08002651
 80026a4:	08002651 	.word	0x08002651
 80026a8:	08002805 	.word	0x08002805
 80026ac:	08002651 	.word	0x08002651
 80026b0:	08002705 	.word	0x08002705
 80026b4:	08002651 	.word	0x08002651
 80026b8:	08002651 	.word	0x08002651
 80026bc:	080027cd 	.word	0x080027cd
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	1d1a      	adds	r2, r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	602a      	str	r2, [r5, #0]
 80026c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0a4      	b.n	800281e <_printf_i+0x1f6>
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	6829      	ldr	r1, [r5, #0]
 80026d8:	0606      	lsls	r6, r0, #24
 80026da:	f101 0304 	add.w	r3, r1, #4
 80026de:	d50a      	bpl.n	80026f6 <_printf_i+0xce>
 80026e0:	680e      	ldr	r6, [r1, #0]
 80026e2:	602b      	str	r3, [r5, #0]
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	da03      	bge.n	80026f0 <_printf_i+0xc8>
 80026e8:	232d      	movs	r3, #45	; 0x2d
 80026ea:	4276      	negs	r6, r6
 80026ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026f0:	230a      	movs	r3, #10
 80026f2:	485e      	ldr	r0, [pc, #376]	; (800286c <_printf_i+0x244>)
 80026f4:	e019      	b.n	800272a <_printf_i+0x102>
 80026f6:	680e      	ldr	r6, [r1, #0]
 80026f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	bf18      	it	ne
 8002700:	b236      	sxthne	r6, r6
 8002702:	e7ef      	b.n	80026e4 <_printf_i+0xbc>
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	6820      	ldr	r0, [r4, #0]
 8002708:	1d19      	adds	r1, r3, #4
 800270a:	6029      	str	r1, [r5, #0]
 800270c:	0601      	lsls	r1, r0, #24
 800270e:	d501      	bpl.n	8002714 <_printf_i+0xec>
 8002710:	681e      	ldr	r6, [r3, #0]
 8002712:	e002      	b.n	800271a <_printf_i+0xf2>
 8002714:	0646      	lsls	r6, r0, #25
 8002716:	d5fb      	bpl.n	8002710 <_printf_i+0xe8>
 8002718:	881e      	ldrh	r6, [r3, #0]
 800271a:	2f6f      	cmp	r7, #111	; 0x6f
 800271c:	bf0c      	ite	eq
 800271e:	2308      	moveq	r3, #8
 8002720:	230a      	movne	r3, #10
 8002722:	4852      	ldr	r0, [pc, #328]	; (800286c <_printf_i+0x244>)
 8002724:	2100      	movs	r1, #0
 8002726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800272a:	6865      	ldr	r5, [r4, #4]
 800272c:	2d00      	cmp	r5, #0
 800272e:	bfa8      	it	ge
 8002730:	6821      	ldrge	r1, [r4, #0]
 8002732:	60a5      	str	r5, [r4, #8]
 8002734:	bfa4      	itt	ge
 8002736:	f021 0104 	bicge.w	r1, r1, #4
 800273a:	6021      	strge	r1, [r4, #0]
 800273c:	b90e      	cbnz	r6, 8002742 <_printf_i+0x11a>
 800273e:	2d00      	cmp	r5, #0
 8002740:	d04d      	beq.n	80027de <_printf_i+0x1b6>
 8002742:	4615      	mov	r5, r2
 8002744:	fbb6 f1f3 	udiv	r1, r6, r3
 8002748:	fb03 6711 	mls	r7, r3, r1, r6
 800274c:	5dc7      	ldrb	r7, [r0, r7]
 800274e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002752:	4637      	mov	r7, r6
 8002754:	42bb      	cmp	r3, r7
 8002756:	460e      	mov	r6, r1
 8002758:	d9f4      	bls.n	8002744 <_printf_i+0x11c>
 800275a:	2b08      	cmp	r3, #8
 800275c:	d10b      	bne.n	8002776 <_printf_i+0x14e>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	07de      	lsls	r6, r3, #31
 8002762:	d508      	bpl.n	8002776 <_printf_i+0x14e>
 8002764:	6923      	ldr	r3, [r4, #16]
 8002766:	6861      	ldr	r1, [r4, #4]
 8002768:	4299      	cmp	r1, r3
 800276a:	bfde      	ittt	le
 800276c:	2330      	movle	r3, #48	; 0x30
 800276e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002772:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002776:	1b52      	subs	r2, r2, r5
 8002778:	6122      	str	r2, [r4, #16]
 800277a:	464b      	mov	r3, r9
 800277c:	4621      	mov	r1, r4
 800277e:	4640      	mov	r0, r8
 8002780:	f8cd a000 	str.w	sl, [sp]
 8002784:	aa03      	add	r2, sp, #12
 8002786:	f7ff fedf 	bl	8002548 <_printf_common>
 800278a:	3001      	adds	r0, #1
 800278c:	d14c      	bne.n	8002828 <_printf_i+0x200>
 800278e:	f04f 30ff 	mov.w	r0, #4294967295
 8002792:	b004      	add	sp, #16
 8002794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002798:	4834      	ldr	r0, [pc, #208]	; (800286c <_printf_i+0x244>)
 800279a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800279e:	6829      	ldr	r1, [r5, #0]
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80027a6:	6029      	str	r1, [r5, #0]
 80027a8:	061d      	lsls	r5, r3, #24
 80027aa:	d514      	bpl.n	80027d6 <_printf_i+0x1ae>
 80027ac:	07df      	lsls	r7, r3, #31
 80027ae:	bf44      	itt	mi
 80027b0:	f043 0320 	orrmi.w	r3, r3, #32
 80027b4:	6023      	strmi	r3, [r4, #0]
 80027b6:	b91e      	cbnz	r6, 80027c0 <_printf_i+0x198>
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f023 0320 	bic.w	r3, r3, #32
 80027be:	6023      	str	r3, [r4, #0]
 80027c0:	2310      	movs	r3, #16
 80027c2:	e7af      	b.n	8002724 <_printf_i+0xfc>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	f043 0320 	orr.w	r3, r3, #32
 80027ca:	6023      	str	r3, [r4, #0]
 80027cc:	2378      	movs	r3, #120	; 0x78
 80027ce:	4828      	ldr	r0, [pc, #160]	; (8002870 <_printf_i+0x248>)
 80027d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027d4:	e7e3      	b.n	800279e <_printf_i+0x176>
 80027d6:	0659      	lsls	r1, r3, #25
 80027d8:	bf48      	it	mi
 80027da:	b2b6      	uxthmi	r6, r6
 80027dc:	e7e6      	b.n	80027ac <_printf_i+0x184>
 80027de:	4615      	mov	r5, r2
 80027e0:	e7bb      	b.n	800275a <_printf_i+0x132>
 80027e2:	682b      	ldr	r3, [r5, #0]
 80027e4:	6826      	ldr	r6, [r4, #0]
 80027e6:	1d18      	adds	r0, r3, #4
 80027e8:	6961      	ldr	r1, [r4, #20]
 80027ea:	6028      	str	r0, [r5, #0]
 80027ec:	0635      	lsls	r5, r6, #24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	d501      	bpl.n	80027f6 <_printf_i+0x1ce>
 80027f2:	6019      	str	r1, [r3, #0]
 80027f4:	e002      	b.n	80027fc <_printf_i+0x1d4>
 80027f6:	0670      	lsls	r0, r6, #25
 80027f8:	d5fb      	bpl.n	80027f2 <_printf_i+0x1ca>
 80027fa:	8019      	strh	r1, [r3, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	4615      	mov	r5, r2
 8002800:	6123      	str	r3, [r4, #16]
 8002802:	e7ba      	b.n	800277a <_printf_i+0x152>
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	2100      	movs	r1, #0
 8002808:	1d1a      	adds	r2, r3, #4
 800280a:	602a      	str	r2, [r5, #0]
 800280c:	681d      	ldr	r5, [r3, #0]
 800280e:	6862      	ldr	r2, [r4, #4]
 8002810:	4628      	mov	r0, r5
 8002812:	f000 f82f 	bl	8002874 <memchr>
 8002816:	b108      	cbz	r0, 800281c <_printf_i+0x1f4>
 8002818:	1b40      	subs	r0, r0, r5
 800281a:	6060      	str	r0, [r4, #4]
 800281c:	6863      	ldr	r3, [r4, #4]
 800281e:	6123      	str	r3, [r4, #16]
 8002820:	2300      	movs	r3, #0
 8002822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002826:	e7a8      	b.n	800277a <_printf_i+0x152>
 8002828:	462a      	mov	r2, r5
 800282a:	4649      	mov	r1, r9
 800282c:	4640      	mov	r0, r8
 800282e:	6923      	ldr	r3, [r4, #16]
 8002830:	47d0      	blx	sl
 8002832:	3001      	adds	r0, #1
 8002834:	d0ab      	beq.n	800278e <_printf_i+0x166>
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	079b      	lsls	r3, r3, #30
 800283a:	d413      	bmi.n	8002864 <_printf_i+0x23c>
 800283c:	68e0      	ldr	r0, [r4, #12]
 800283e:	9b03      	ldr	r3, [sp, #12]
 8002840:	4298      	cmp	r0, r3
 8002842:	bfb8      	it	lt
 8002844:	4618      	movlt	r0, r3
 8002846:	e7a4      	b.n	8002792 <_printf_i+0x16a>
 8002848:	2301      	movs	r3, #1
 800284a:	4632      	mov	r2, r6
 800284c:	4649      	mov	r1, r9
 800284e:	4640      	mov	r0, r8
 8002850:	47d0      	blx	sl
 8002852:	3001      	adds	r0, #1
 8002854:	d09b      	beq.n	800278e <_printf_i+0x166>
 8002856:	3501      	adds	r5, #1
 8002858:	68e3      	ldr	r3, [r4, #12]
 800285a:	9903      	ldr	r1, [sp, #12]
 800285c:	1a5b      	subs	r3, r3, r1
 800285e:	42ab      	cmp	r3, r5
 8002860:	dcf2      	bgt.n	8002848 <_printf_i+0x220>
 8002862:	e7eb      	b.n	800283c <_printf_i+0x214>
 8002864:	2500      	movs	r5, #0
 8002866:	f104 0619 	add.w	r6, r4, #25
 800286a:	e7f5      	b.n	8002858 <_printf_i+0x230>
 800286c:	08002ced 	.word	0x08002ced
 8002870:	08002cfe 	.word	0x08002cfe

08002874 <memchr>:
 8002874:	4603      	mov	r3, r0
 8002876:	b510      	push	{r4, lr}
 8002878:	b2c9      	uxtb	r1, r1
 800287a:	4402      	add	r2, r0
 800287c:	4293      	cmp	r3, r2
 800287e:	4618      	mov	r0, r3
 8002880:	d101      	bne.n	8002886 <memchr+0x12>
 8002882:	2000      	movs	r0, #0
 8002884:	e003      	b.n	800288e <memchr+0x1a>
 8002886:	7804      	ldrb	r4, [r0, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	428c      	cmp	r4, r1
 800288c:	d1f6      	bne.n	800287c <memchr+0x8>
 800288e:	bd10      	pop	{r4, pc}

08002890 <memcpy>:
 8002890:	440a      	add	r2, r1
 8002892:	4291      	cmp	r1, r2
 8002894:	f100 33ff 	add.w	r3, r0, #4294967295
 8002898:	d100      	bne.n	800289c <memcpy+0xc>
 800289a:	4770      	bx	lr
 800289c:	b510      	push	{r4, lr}
 800289e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028a2:	4291      	cmp	r1, r2
 80028a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a8:	d1f9      	bne.n	800289e <memcpy+0xe>
 80028aa:	bd10      	pop	{r4, pc}

080028ac <memmove>:
 80028ac:	4288      	cmp	r0, r1
 80028ae:	b510      	push	{r4, lr}
 80028b0:	eb01 0402 	add.w	r4, r1, r2
 80028b4:	d902      	bls.n	80028bc <memmove+0x10>
 80028b6:	4284      	cmp	r4, r0
 80028b8:	4623      	mov	r3, r4
 80028ba:	d807      	bhi.n	80028cc <memmove+0x20>
 80028bc:	1e43      	subs	r3, r0, #1
 80028be:	42a1      	cmp	r1, r4
 80028c0:	d008      	beq.n	80028d4 <memmove+0x28>
 80028c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028ca:	e7f8      	b.n	80028be <memmove+0x12>
 80028cc:	4601      	mov	r1, r0
 80028ce:	4402      	add	r2, r0
 80028d0:	428a      	cmp	r2, r1
 80028d2:	d100      	bne.n	80028d6 <memmove+0x2a>
 80028d4:	bd10      	pop	{r4, pc}
 80028d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028de:	e7f7      	b.n	80028d0 <memmove+0x24>

080028e0 <_free_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4605      	mov	r5, r0
 80028e4:	2900      	cmp	r1, #0
 80028e6:	d040      	beq.n	800296a <_free_r+0x8a>
 80028e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028ec:	1f0c      	subs	r4, r1, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bfb8      	it	lt
 80028f2:	18e4      	addlt	r4, r4, r3
 80028f4:	f000 f910 	bl	8002b18 <__malloc_lock>
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <_free_r+0x8c>)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	b933      	cbnz	r3, 800290c <_free_r+0x2c>
 80028fe:	6063      	str	r3, [r4, #4]
 8002900:	6014      	str	r4, [r2, #0]
 8002902:	4628      	mov	r0, r5
 8002904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002908:	f000 b90c 	b.w	8002b24 <__malloc_unlock>
 800290c:	42a3      	cmp	r3, r4
 800290e:	d908      	bls.n	8002922 <_free_r+0x42>
 8002910:	6820      	ldr	r0, [r4, #0]
 8002912:	1821      	adds	r1, r4, r0
 8002914:	428b      	cmp	r3, r1
 8002916:	bf01      	itttt	eq
 8002918:	6819      	ldreq	r1, [r3, #0]
 800291a:	685b      	ldreq	r3, [r3, #4]
 800291c:	1809      	addeq	r1, r1, r0
 800291e:	6021      	streq	r1, [r4, #0]
 8002920:	e7ed      	b.n	80028fe <_free_r+0x1e>
 8002922:	461a      	mov	r2, r3
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	b10b      	cbz	r3, 800292c <_free_r+0x4c>
 8002928:	42a3      	cmp	r3, r4
 800292a:	d9fa      	bls.n	8002922 <_free_r+0x42>
 800292c:	6811      	ldr	r1, [r2, #0]
 800292e:	1850      	adds	r0, r2, r1
 8002930:	42a0      	cmp	r0, r4
 8002932:	d10b      	bne.n	800294c <_free_r+0x6c>
 8002934:	6820      	ldr	r0, [r4, #0]
 8002936:	4401      	add	r1, r0
 8002938:	1850      	adds	r0, r2, r1
 800293a:	4283      	cmp	r3, r0
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	d1e0      	bne.n	8002902 <_free_r+0x22>
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4401      	add	r1, r0
 8002946:	6011      	str	r1, [r2, #0]
 8002948:	6053      	str	r3, [r2, #4]
 800294a:	e7da      	b.n	8002902 <_free_r+0x22>
 800294c:	d902      	bls.n	8002954 <_free_r+0x74>
 800294e:	230c      	movs	r3, #12
 8002950:	602b      	str	r3, [r5, #0]
 8002952:	e7d6      	b.n	8002902 <_free_r+0x22>
 8002954:	6820      	ldr	r0, [r4, #0]
 8002956:	1821      	adds	r1, r4, r0
 8002958:	428b      	cmp	r3, r1
 800295a:	bf01      	itttt	eq
 800295c:	6819      	ldreq	r1, [r3, #0]
 800295e:	685b      	ldreq	r3, [r3, #4]
 8002960:	1809      	addeq	r1, r1, r0
 8002962:	6021      	streq	r1, [r4, #0]
 8002964:	6063      	str	r3, [r4, #4]
 8002966:	6054      	str	r4, [r2, #4]
 8002968:	e7cb      	b.n	8002902 <_free_r+0x22>
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	200001d0 	.word	0x200001d0

08002970 <sbrk_aligned>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4e0e      	ldr	r6, [pc, #56]	; (80029ac <sbrk_aligned+0x3c>)
 8002974:	460c      	mov	r4, r1
 8002976:	6831      	ldr	r1, [r6, #0]
 8002978:	4605      	mov	r5, r0
 800297a:	b911      	cbnz	r1, 8002982 <sbrk_aligned+0x12>
 800297c:	f000 f8bc 	bl	8002af8 <_sbrk_r>
 8002980:	6030      	str	r0, [r6, #0]
 8002982:	4621      	mov	r1, r4
 8002984:	4628      	mov	r0, r5
 8002986:	f000 f8b7 	bl	8002af8 <_sbrk_r>
 800298a:	1c43      	adds	r3, r0, #1
 800298c:	d00a      	beq.n	80029a4 <sbrk_aligned+0x34>
 800298e:	1cc4      	adds	r4, r0, #3
 8002990:	f024 0403 	bic.w	r4, r4, #3
 8002994:	42a0      	cmp	r0, r4
 8002996:	d007      	beq.n	80029a8 <sbrk_aligned+0x38>
 8002998:	1a21      	subs	r1, r4, r0
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f8ac 	bl	8002af8 <_sbrk_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d101      	bne.n	80029a8 <sbrk_aligned+0x38>
 80029a4:	f04f 34ff 	mov.w	r4, #4294967295
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	200001d4 	.word	0x200001d4

080029b0 <_malloc_r>:
 80029b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b4:	1ccd      	adds	r5, r1, #3
 80029b6:	f025 0503 	bic.w	r5, r5, #3
 80029ba:	3508      	adds	r5, #8
 80029bc:	2d0c      	cmp	r5, #12
 80029be:	bf38      	it	cc
 80029c0:	250c      	movcc	r5, #12
 80029c2:	2d00      	cmp	r5, #0
 80029c4:	4607      	mov	r7, r0
 80029c6:	db01      	blt.n	80029cc <_malloc_r+0x1c>
 80029c8:	42a9      	cmp	r1, r5
 80029ca:	d905      	bls.n	80029d8 <_malloc_r+0x28>
 80029cc:	230c      	movs	r3, #12
 80029ce:	2600      	movs	r6, #0
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4630      	mov	r0, r6
 80029d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d8:	4e2e      	ldr	r6, [pc, #184]	; (8002a94 <_malloc_r+0xe4>)
 80029da:	f000 f89d 	bl	8002b18 <__malloc_lock>
 80029de:	6833      	ldr	r3, [r6, #0]
 80029e0:	461c      	mov	r4, r3
 80029e2:	bb34      	cbnz	r4, 8002a32 <_malloc_r+0x82>
 80029e4:	4629      	mov	r1, r5
 80029e6:	4638      	mov	r0, r7
 80029e8:	f7ff ffc2 	bl	8002970 <sbrk_aligned>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	4604      	mov	r4, r0
 80029f0:	d14d      	bne.n	8002a8e <_malloc_r+0xde>
 80029f2:	6834      	ldr	r4, [r6, #0]
 80029f4:	4626      	mov	r6, r4
 80029f6:	2e00      	cmp	r6, #0
 80029f8:	d140      	bne.n	8002a7c <_malloc_r+0xcc>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	4631      	mov	r1, r6
 80029fe:	4638      	mov	r0, r7
 8002a00:	eb04 0803 	add.w	r8, r4, r3
 8002a04:	f000 f878 	bl	8002af8 <_sbrk_r>
 8002a08:	4580      	cmp	r8, r0
 8002a0a:	d13a      	bne.n	8002a82 <_malloc_r+0xd2>
 8002a0c:	6821      	ldr	r1, [r4, #0]
 8002a0e:	3503      	adds	r5, #3
 8002a10:	1a6d      	subs	r5, r5, r1
 8002a12:	f025 0503 	bic.w	r5, r5, #3
 8002a16:	3508      	adds	r5, #8
 8002a18:	2d0c      	cmp	r5, #12
 8002a1a:	bf38      	it	cc
 8002a1c:	250c      	movcc	r5, #12
 8002a1e:	4638      	mov	r0, r7
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7ff ffa5 	bl	8002970 <sbrk_aligned>
 8002a26:	3001      	adds	r0, #1
 8002a28:	d02b      	beq.n	8002a82 <_malloc_r+0xd2>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	442b      	add	r3, r5
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	e00e      	b.n	8002a50 <_malloc_r+0xa0>
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	1b52      	subs	r2, r2, r5
 8002a36:	d41e      	bmi.n	8002a76 <_malloc_r+0xc6>
 8002a38:	2a0b      	cmp	r2, #11
 8002a3a:	d916      	bls.n	8002a6a <_malloc_r+0xba>
 8002a3c:	1961      	adds	r1, r4, r5
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	6025      	str	r5, [r4, #0]
 8002a42:	bf18      	it	ne
 8002a44:	6059      	strne	r1, [r3, #4]
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	bf08      	it	eq
 8002a4a:	6031      	streq	r1, [r6, #0]
 8002a4c:	5162      	str	r2, [r4, r5]
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	4638      	mov	r0, r7
 8002a52:	f104 060b 	add.w	r6, r4, #11
 8002a56:	f000 f865 	bl	8002b24 <__malloc_unlock>
 8002a5a:	f026 0607 	bic.w	r6, r6, #7
 8002a5e:	1d23      	adds	r3, r4, #4
 8002a60:	1af2      	subs	r2, r6, r3
 8002a62:	d0b6      	beq.n	80029d2 <_malloc_r+0x22>
 8002a64:	1b9b      	subs	r3, r3, r6
 8002a66:	50a3      	str	r3, [r4, r2]
 8002a68:	e7b3      	b.n	80029d2 <_malloc_r+0x22>
 8002a6a:	6862      	ldr	r2, [r4, #4]
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	bf0c      	ite	eq
 8002a70:	6032      	streq	r2, [r6, #0]
 8002a72:	605a      	strne	r2, [r3, #4]
 8002a74:	e7ec      	b.n	8002a50 <_malloc_r+0xa0>
 8002a76:	4623      	mov	r3, r4
 8002a78:	6864      	ldr	r4, [r4, #4]
 8002a7a:	e7b2      	b.n	80029e2 <_malloc_r+0x32>
 8002a7c:	4634      	mov	r4, r6
 8002a7e:	6876      	ldr	r6, [r6, #4]
 8002a80:	e7b9      	b.n	80029f6 <_malloc_r+0x46>
 8002a82:	230c      	movs	r3, #12
 8002a84:	4638      	mov	r0, r7
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	f000 f84c 	bl	8002b24 <__malloc_unlock>
 8002a8c:	e7a1      	b.n	80029d2 <_malloc_r+0x22>
 8002a8e:	6025      	str	r5, [r4, #0]
 8002a90:	e7de      	b.n	8002a50 <_malloc_r+0xa0>
 8002a92:	bf00      	nop
 8002a94:	200001d0 	.word	0x200001d0

08002a98 <_realloc_r>:
 8002a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9c:	4680      	mov	r8, r0
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	460e      	mov	r6, r1
 8002aa2:	b921      	cbnz	r1, 8002aae <_realloc_r+0x16>
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aaa:	f7ff bf81 	b.w	80029b0 <_malloc_r>
 8002aae:	b92a      	cbnz	r2, 8002abc <_realloc_r+0x24>
 8002ab0:	f7ff ff16 	bl	80028e0 <_free_r>
 8002ab4:	4625      	mov	r5, r4
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002abc:	f000 f838 	bl	8002b30 <_malloc_usable_size_r>
 8002ac0:	4284      	cmp	r4, r0
 8002ac2:	4607      	mov	r7, r0
 8002ac4:	d802      	bhi.n	8002acc <_realloc_r+0x34>
 8002ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002aca:	d812      	bhi.n	8002af2 <_realloc_r+0x5a>
 8002acc:	4621      	mov	r1, r4
 8002ace:	4640      	mov	r0, r8
 8002ad0:	f7ff ff6e 	bl	80029b0 <_malloc_r>
 8002ad4:	4605      	mov	r5, r0
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d0ed      	beq.n	8002ab6 <_realloc_r+0x1e>
 8002ada:	42bc      	cmp	r4, r7
 8002adc:	4622      	mov	r2, r4
 8002ade:	4631      	mov	r1, r6
 8002ae0:	bf28      	it	cs
 8002ae2:	463a      	movcs	r2, r7
 8002ae4:	f7ff fed4 	bl	8002890 <memcpy>
 8002ae8:	4631      	mov	r1, r6
 8002aea:	4640      	mov	r0, r8
 8002aec:	f7ff fef8 	bl	80028e0 <_free_r>
 8002af0:	e7e1      	b.n	8002ab6 <_realloc_r+0x1e>
 8002af2:	4635      	mov	r5, r6
 8002af4:	e7df      	b.n	8002ab6 <_realloc_r+0x1e>
	...

08002af8 <_sbrk_r>:
 8002af8:	b538      	push	{r3, r4, r5, lr}
 8002afa:	2300      	movs	r3, #0
 8002afc:	4d05      	ldr	r5, [pc, #20]	; (8002b14 <_sbrk_r+0x1c>)
 8002afe:	4604      	mov	r4, r0
 8002b00:	4608      	mov	r0, r1
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	f7fe f94a 	bl	8000d9c <_sbrk>
 8002b08:	1c43      	adds	r3, r0, #1
 8002b0a:	d102      	bne.n	8002b12 <_sbrk_r+0x1a>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	b103      	cbz	r3, 8002b12 <_sbrk_r+0x1a>
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
 8002b14:	200001d8 	.word	0x200001d8

08002b18 <__malloc_lock>:
 8002b18:	4801      	ldr	r0, [pc, #4]	; (8002b20 <__malloc_lock+0x8>)
 8002b1a:	f000 b811 	b.w	8002b40 <__retarget_lock_acquire_recursive>
 8002b1e:	bf00      	nop
 8002b20:	200001dc 	.word	0x200001dc

08002b24 <__malloc_unlock>:
 8002b24:	4801      	ldr	r0, [pc, #4]	; (8002b2c <__malloc_unlock+0x8>)
 8002b26:	f000 b80c 	b.w	8002b42 <__retarget_lock_release_recursive>
 8002b2a:	bf00      	nop
 8002b2c:	200001dc 	.word	0x200001dc

08002b30 <_malloc_usable_size_r>:
 8002b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b34:	1f18      	subs	r0, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfbc      	itt	lt
 8002b3a:	580b      	ldrlt	r3, [r1, r0]
 8002b3c:	18c0      	addlt	r0, r0, r3
 8002b3e:	4770      	bx	lr

08002b40 <__retarget_lock_acquire_recursive>:
 8002b40:	4770      	bx	lr

08002b42 <__retarget_lock_release_recursive>:
 8002b42:	4770      	bx	lr

08002b44 <_init>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr

08002b50 <_fini>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr
